{
  "models": {
    "UserAgreement": {
      "id": "UserAgreement",
      "properties": {
        "hidden": {
          "description": "True if agreement is hidden for the user",
          "type": "boolean",
          "required": true
        },
        "displayDate": {
          "format": "date",
          "description": "The display date for the agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": true
        },
        "groupId": {
          "description": "Unique identifier of the group",
          "type": "string",
          "required": true
        },
        "esign": {
          "description": "True if this is an e-sign document",
          "type": "boolean",
          "required": true
        },
        "name": {
          "description": "Name of the Agreement",
          "type": "string",
          "required": true
        },
        "displayParticipantSetInfos": {
          "description": "The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user",
          "type": "array",
          "items": {
            "$ref": "DisplayParticipantSetInfo"
          },
          "required": true
        },
        "latestVersionId": {
          "description": "A version ID which uniquely identifies the current version of the agreement",
          "type": "string",
          "required": true
        },
        "id": {
          "description": "The unique identifier of the agreement.If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false
        },
        "type": {
          "description": "The kind of agreement",
          "type": "string",
          "required": false,
          "enum": [
            "AGREEMENT",
            "MEGASIGN_CHILD",
            "WIDGET_INSTANCE"
          ]
        },
        "parentId": {
          "description": "The parent id of a megaSign child *OR* the originating id of a widget agreement instance",
          "type": "string",
          "required": false
        },
        "status": {
          "description": "This is a server generated attribute which provides the detailed status of an agreement with respect to the apiCaller",
          "type": "string",
          "required": false,
          "enum": [
            "WAITING_FOR_MY_SIGNATURE",
            "WAITING_FOR_MY_APPROVAL",
            "WAITING_FOR_MY_DELEGATION",
            "WAITING_FOR_MY_ACKNOWLEDGEMENT",
            "WAITING_FOR_MY_ACCEPTANCE",
            "WAITING_FOR_MY_FORM_FILLING",
            "OUT_FOR_SIGNATURE",
            "OUT_FOR_APPROVAL",
            "OUT_FOR_DELIVERY",
            "OUT_FOR_ACCEPTANCE",
            "OUT_FOR_FORM_FILLING",
            "SIGNED",
            "APPROVED",
            "FORM_FILLED",
            "DELIVERED",
            "ACCEPTED",
            "ARCHIVED",
            "CANCELLED",
            "EXPIRED",
            "WAITING_FOR_AUTHORING",
            "WAITING_FOR_PREFILL",
            "DRAFT",
            "DOCUMENTS_NOT_YET_PROCESSED",
            "WAITING_FOR_MY_VERIFICATION",
            "WAITING_FOR_VERIFICATION"
          ]
        }
      }
    },
    "PhoneInfo": {
      "id": "PhoneInfo",
      "properties": {
        "countryIsoCode": {
          "description": "The country ISO Alpha-2 code required for the participant to view and sign the document if authentication method is PHONE",
          "type": "string",
          "required": false
        },
        "phone": {
          "description": "The phone number required for the participant to view and sign the document if authentication method is PHONE. When replacing a participant that has PHONE authentication specified, you must supply a phone number for the new participant.",
          "type": "string",
          "required": false
        },
        "countryCode": {
          "description": "The numeric country calling code (ISD code) required for the participant to view and sign the document if authentication type is PHONE",
          "type": "string",
          "required": false
        }
      }
    },
    "ReminderInfo": {
      "id": "ReminderInfo",
      "properties": {
        "note": {
          "description": "An optional message sent to the recipients, describing why their participation is required",
          "type": "string",
          "required": false
        },
        "lastSentDate": {
          "format": "date",
          "description": "The date when the reminder was last sent. Only provided in GET. Cannot be provided in POST request. If provided in POST, it will be ignored. Cannot be updated in a PUT. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "nextSentDate": {
          "format": "date",
          "description": "The date when the reminder is scheduled to be sent next. When provided in POST request, frequency needs to be ONCE (or not specified), startReminderCounterFrom needs to be REMINDER_CREATION (or not specified) and firstReminderDelay needs to be 0 (or not specified). Cannot be updated in a PUT. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "reminderId": {
          "description": "An identifier of the reminder resource created on the server. If provided in POST or PUT, it will be ignored",
          "type": "string",
          "required": false
        },
        "firstReminderDelay": {
          "description": "Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value canâ€™t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Cannot be updated in a PUT",
          "type": "integer",
          "required": false
        },
        "recipientParticipantIds": {
          "description": "A list of one or more participant IDs that the reminder should be sent to. These must be recipients of the agreement and not sharees or cc's.",
          "type": "array",
          "items": {
            "$ref": "string"
          },
          "required": true
        },
        "startReminderCounterFrom": {
          "description": "Reminder can be sent based on when the agreement becomes available or when the reminder is created<br>AGREEMENT_AVAILABILITY: If the agreement is not available to the participant at the time of reminder creation, the reminder will be sent for the first time, only when the agreement becomes available to the participant taking the firstReminderDelay into account. Subsequent reminders will be sent based on the frequency specified.  If the agreement is already available to the participant at the time of reminder creation, the first reminder will be sent after the delay specified by firstReminderDelay from the reminder creation time.<br>REMINDER_CREATION: The first reminder will be sent after the delay specified by firstReminderDelay from the reminder creation time only if the agreement is available at that time. Subsequent reminders will be triggered based on the frequency specified and will be sent only if the agreement is available at that time.  For agreements in authoring state, creating reminder with startReminderCounterFrom as REMINDER_CREATION is not allowed.<br>Note : If firstReminderDelay, frequency and startReminderCounterFrom fields are not specified in POST, reminder will be sent right now if the agreement is available. If agreement is not available, an error will be thrown.  Cannot be updated in a PUT",
          "type": "string",
          "required": false,
          "enum": [
            "AGREEMENT_AVAILABILITY",
            "REMINDER_CREATION"
          ]
        },
        "frequency": {
          "description": "The frequency at which reminder will be sent until the agreement is completed.<br>If frequency is not provided, the reminder will be sent once (if the agreement is available at the specified time) with the delay based on the firstReminderDelay field and will never repeat again. If the agreement is not available at that time, reminder will not be sent. Cannot be updated in a PUT",
          "type": "string",
          "required": false,
          "enum": [
            "DAILY_UNTIL_SIGNED",
            "WEEKDAILY_UNTIL_SIGNED",
            "EVERY_OTHER_DAY_UNTIL_SIGNED",
            "EVERY_THIRD_DAY_UNTIL_SIGNED",
            "EVERY_FIFTH_DAY_UNTIL_SIGNED",
            "WEEKLY_UNTIL_SIGNED",
            "ONCE"
          ]
        },
        "status": {
          "description": "Current status of the reminder.  The only valid update in a PUT is from ACTIVE to CANCELED.  Must be provided as ACTIVE in a POST.",
          "type": "string",
          "required": true,
          "enum": [
            "ACTIVE",
            "CANCELED",
            "COMPLETE"
          ]
        }
      }
    },
    "Document": {
      "id": "Document",
      "properties": {
        "numPages": {
          "description": "Number of pages in the document",
          "type": "integer",
          "required": true
        },
        "createdDate": {
          "description": "The date the document was created",
          "type": "date",
          "required": true
        },
        "name": {
          "description": "Name of the original document uploaded. This is returned in GET but not accepted back in PUT",
          "type": "string",
          "required": false
        },
        "id": {
          "description": "ID of the document. In case of PUT call, this is the only field that is accepted in Document structure. Name and mimeType are ignored in case of PUT call",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label of the document",
          "type": "string",
          "required": true
        },
        "mimeType": {
          "description": "mimeType of the original file. This is returned in GET but not accepted back in PUT",
          "type": "string",
          "required": false
        }
      }
    },
    "ReminderCreationResult": {
      "id": "ReminderCreationResult",
      "properties": {
        "id": {
          "description": "An identifier of the reminder resource created on the server. If provided in POST or PUT, it will be ignored",
          "type": "string",
          "required": false
        }
      }
    },
    "DeviceLocation": {
      "id": "DeviceLocation",
      "properties": {
        "latitude": {
          "description": "Latitude coordinate",
          "type": "float",
          "required": true
        },
        "longitude": {
          "description": "Longitude coordinate",
          "type": "float",
          "required": true
        }
      }
    },
    "VaultEventInfo": {
      "id": "VaultEventInfo",
      "properties": {
        "vaultEventComment": {
          "description": "The description provided by the vault provider for the vault event",
          "type": "string",
          "required": false
        },
        "vaultEventId": {
          "description": "The identifier assigned by the vault provider for the vault event",
          "type": "string",
          "required": true
        }
      }
    },
    "EmailOption": {
      "id": "EmailOption",
      "properties": {
        "sendOptions": {
          "description": "Specify emails to be sent to different participants at different steps of the agreement process. Note: ALL means  emails for the events will be sent to all participants. NONE means emails for the events will not be sent to any participant",
          "type": "SendOptions",
          "items": {
            "$ref": "SendOptions"
          },
          "required": false
        }
      }
    },
    "FileInfo": {
      "id": "FileInfo",
      "properties": {
        "transientDocumentId": {
          "description": "ID for a transient document that will be added to the agreement",
          "showInSampleRequest": true,
          "type": "string",
          "required": false
        },
        "document": {
          "description": "A document that is associated with the agreement. This field cannot be provided in POST call. In case of GET call, this is the only field returned in the response",
          "type": "Document",
          "items": {
            "$ref": "Document"
          },
          "required": false
        },
        "libraryDocumentId": {
          "description": "ID for an existing Library document that will be added to the agreement",
          "type": "string",
          "required": false
        },
        "label": {
          "description": "The unique label value of a file info element. In case of custom workflow this will map a file to corresponding file element in workflow definition. This must be specified in case of custom workflow agreement creation request ",
          "type": "string",
          "required": false
        },
        "urlFileInfo": {
          "description": "URL for an external document to add to the agreement",
          "type": "URLFileInfo",
          "items": {
            "$ref": "URLFileInfo"
          },
          "required": false
        }
      }
    },
    "DelegatedParticipantInfo": {
      "id": "DelegatedParticipantInfo",
      "properties": {
        "email": {
          "description": "Email of the participant. In case of modifying a participant set (PUT) this is a required field. In case of GET, this is the required field and will always be returned unless it is a fax workflow (legacy agreements) that were created using fax as input",
          "type": "string",
          "required": true
        },
        "securityOption": {
          "description": "Security options that apply to the participant.",
          "type": "DelegatedParticipantSecurityOption",
          "items": {
            "$ref": "DelegatedParticipantSecurityOption"
          },
          "required": true
        }
      }
    },
    "ComposeViewConfiguration": {
      "id": "ComposeViewConfiguration",
      "properties": {
        "fileUploadOptions": {
          "description": "Controls various file upload options available on the compose page",
          "type": "FileUploadOptions",
          "items": {
            "$ref": "FileUploadOptions"
          },
          "required": false
        },
        "isPreviewSelected": {
          "description": "Should the compose page be provided with authoring mode selected?",
          "type": "boolean",
          "required": false
        }
      }
    },
    "FormFieldConditionPredicate": {
      "description": "A predicate used to determine whether the condtion succeeds",
      "id": "FormFieldConditionPredicate",
      "properties": {
        "fieldName": {
          "description": "Name of the field whose value is the basis of predicate",
          "type": "string",
          "required": false
        },
        "value": {
          "description": "Value to compare against the value of the predicate's form field, using the specified operator",
          "type": "string",
          "required": false
        },
        "operator": {
          "description": "Operator to be applied on the value of the predicate field.",
          "type": "string",
          "required": false,
          "enum": [
            "EQUALS",
            "NOT_EQUALS",
            "LESS_THAN",
            "LESS_THAN_EQUALS",
            "GREATER_THAN",
            "GREATER_THAN_EQUALS",
            "IN",
            "NOT_IN",
            "CONTAINS",
            "NOT_CONTAINS"
          ]
        },
        "fieldLocationIndex": {
          "description": "Index of the location of the form field used in the predicate",
          "type": "integer",
          "required": false
        }
      }
    },
    "ShareParticipantInfo": {
      "id": "ShareParticipantInfo",
      "properties": {
        "participantId": {
          "description": "The unique identifier of the sharee participant of the agreement.",
          "type": "string",
          "required": true
        },
        "hidden": {
          "description": "True if the agreement is hidden for the user that is calling the API. Only returned if self is true.",
          "type": "boolean",
          "required": true
        },
        "name": {
          "description": "Name of the sharee participant, if available.",
          "type": "string",
          "required": true
        },
        "self": {
          "description": "True if the Share participant is the same user that is calling the API.",
          "type": "boolean",
          "required": true
        },
        "sharerParticipantId": {
          "description": "The unique identifier of the participant who shared the agreement.",
          "type": "string",
          "required": true
        },
        "company": {
          "description": "Company of the sharee participant, if available.",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "Email of the sharee participant of the agreement.",
          "type": "string",
          "required": true
        }
      }
    },
    "SigningUrl": {
      "id": "SigningUrl",
      "properties": {
        "esignUrl": {
          "description": "The email address of the signer associated with this signing url",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "The email address of the signer associated with this signing url",
          "type": "string",
          "required": true
        }
      }
    },
    "ShareCreationResponse": {
      "id": "ShareCreationResponse",
      "properties": {
        "participantId": {
          "description": "The unique identifier of the participant",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "The email address that was requested",
          "type": "string",
          "required": true
        }
      }
    },
    "FormField": {
      "description": "A form field for an agreement.",
      "id": "FormField",
      "properties": {
        "radioCheckType": {
          "description": "The type of radio button (if field is radio button, identified by inputType).",
          "type": "string",
          "required": false,
          "enum": [
            "CIRCLE",
            "CHECK",
            "CROSS",
            "DIAMOND",
            "SQUARE",
            "STAR"
          ]
        },
        "borderColor": {
          "description": "Color of the border of the field in RGB or HEX format",
          "type": "string",
          "required": false
        },
        "valueExpression": {
          "description": "Expression to calculate value of the form field",
          "type": "string",
          "required": false
        },
        "maskingText": {
          "description": "Text to mask the masked form field",
          "type": "string",
          "required": false
        },
        "defaultValue": {
          "description": "Default value of the form field",
          "type": "string",
          "required": false
        },
        "masked": {
          "description": "true if the input entered by the signer has to be masked (like password), false if it shouldn't be",
          "type": "boolean",
          "required": false
        },
        "minLength": {
          "description": "Minimum length of the input text field in terms of no. of characters",
          "type": "integer",
          "required": false
        },
        "origin": {
          "description": "Origin of Form Field",
          "type": "string",
          "required": false,
          "enum": [
            "AUTHORED",
            "GENERATED",
            "IMPORTED"
          ]
        },
        "tooltip": {
          "description": "Text that appears while hovering over the field",
          "type": "string",
          "required": false
        },
        "hiddenOptions": {
          "description": "Text values which are hidden in a drop down form field",
          "type": "array",
          "items": {
            "$ref": "string"
          },
          "required": false
        },
        "required": {
          "description": "true if it is a mandatory field to be filled by the signer, else false",
          "type": "boolean",
          "required": false
        },
        "validationData": {
          "description": "Further data for validating input with regards to the field's specified format. The contents and interpretation of formatData depends on the value of validation.",
          "type": "string",
          "required": false
        },
        "minValue": {
          "format": "double",
          "description": "Lower bound of the number that can be entered by the signer",
          "type": "number",
          "required": false
        },
        "borderWidth": {
          "format": "double",
          "description": "Width of the border of the field in pixels",
          "type": "number",
          "required": false
        },
        "urlOverridable": {
          "description": "For web form text fields only - true if the default value may come from the URL, else false",
          "type": "boolean",
          "required": false
        },
        "inputType": {
          "description": "Input type of the form field",
          "type": "string",
          "required": false,
          "enum": [
            "TEXT_FIELD",
            "MULTILINE",
            "PASSWORD",
            "RADIO",
            "CHECKBOX",
            "DROP_DOWN",
            "LISTBOX",
            "SIGNATURE",
            "PDF_SIGNATURE",
            "BUTTON",
            "BLOCK",
            "FILE_CHOOSER",
            "COMB",
            "INLINE_IMAGE",
            "UNSUPPORTED"
          ]
        },
        "borderStyle": {
          "description": "Style of the border of the field.",
          "type": "string",
          "required": false,
          "enum": [
            "SOLID",
            "DASHED",
            "BEVELED",
            "INSET",
            "UNDERLINE"
          ]
        },
        "calculated": {
          "description": "true if this field's value is calculated from an expression, else false",
          "type": "boolean",
          "required": false
        },
        "contentType": {
          "description": "Content Type of the form field.",
          "type": "string",
          "required": false,
          "enum": [
            "DATA",
            "SIGNATURE_BLOCK",
            "SIGNATURE",
            "SIGNER_NAME",
            "SIGNER_FIRST_NAME",
            "SIGNER_LAST_NAME",
            "SIGNER_INITIALS",
            "SIGNER_EMAIL",
            "SIGNER_TITLE",
            "SIGNER_COMPANY",
            "SIGNATURE_DATE",
            "AGREEMENT_NAME",
            "AGREEMENT_MESSAGE",
            "TRANSACTION_ID",
            "SIGNATURE_STAMP",
            "PAYMENT",
            "DIGITAL_SIGNATURE",
            "CALC"
          ]
        },
        "validation": {
          "description": "Rule for validating the field value.",
          "type": "string",
          "required": false,
          "enum": [
            "NONE",
            "STRING",
            "NUMBER",
            "DATE",
            "DATE_CUSTOM",
            "TIME",
            "ZIP",
            "PHONE",
            "SOCIAL_SEC",
            "EMAIL",
            "CURRENCY",
            "PERCENT",
            "FORMULA",
            "CUSTOM",
            "XFA_PICTURE"
          ]
        },
        "displayLabel": {
          "description": "Display label attached to the field",
          "type": "string",
          "required": false
        },
        "hyperlink": {
          "description": "Hyperlink-specific data (e.g. as url, link type)",
          "type": "FormFieldHyperlink",
          "items": {
            "$ref": "FormFieldHyperlink"
          },
          "required": false
        },
        "backgroundColor": {
          "description": "Background color of the form field in RGB or HEX format",
          "type": "string",
          "required": false
        },
        "visible": {
          "description": "If set to false, then the form field is hidden.  Otherwise, it is visible.",
          "type": "boolean",
          "required": false
        },
        "displayFormatType": {
          "description": "Format type of the text field.",
          "type": "string",
          "required": false,
          "enum": [
            "DEFAULT",
            "DATE",
            "NUMBER"
          ]
        },
        "maxValue": {
          "format": "double",
          "description": "Upper bound of the number that can be entered by the signer",
          "type": "number",
          "required": false
        },
        "validationErrMsg": {
          "description": "Error message to be shown to the signer if filled value doesn't match the validations of the form field",
          "type": "string",
          "required": false
        },
        "displayFormat": {
          "description": "Format of the value of the field to be displayed based on the displayFormatType property.",
          "type": "string",
          "required": false
        },
        "visibleOptions": {
          "description": "Text values which are visible in a drop down form field",
          "type": "array",
          "items": {
            "$ref": "string"
          },
          "required": false
        },
        "readOnly": {
          "description": "true if it is a read-only field, else false",
          "type": "boolean",
          "required": false
        },
        "fontName": {
          "description": "Font name of the form field",
          "type": "string",
          "required": false
        },
        "conditionalAction": {
          "description": "A predicate (or set of predicates) that determines whether this field is visible and enabled.",
          "type": "FormFieldConditionalAction",
          "items": {
            "$ref": "FormFieldConditionalAction"
          },
          "required": false
        },
        "name": {
          "description": "The name of the form field",
          "type": "string",
          "required": true
        },
        "fontSize": {
          "format": "double",
          "description": "Font size of the form field in points",
          "type": "number",
          "required": false
        },
        "locations": {
          "description": "All locations in a document where the form field is placed",
          "type": "array",
          "items": {
            "$ref": "FormFieldLocation"
          },
          "required": true
        },
        "assignee": {
          "description": "Who the field is assigned to. Valid values are a participant set id, null, \"NOBODY\", \"PREFILL\" or \"EVERYONE\". If set to a participant set id, then any member of that participant set may fill out the field. \"NOBODY\" indicates that the field may not be filled by anybody (e.g. autopopulated fields like transaction number). \"PREFILL\" indicates that the field will be filled by the sender before the agreement is sent out for signing. \"EVERYONE\" exists only in hyperlink fields currently and indicates that it is assigned to all participants. null indicates that anybody may fill out the field. If the propeerty isn't specified, it is treated as null.",
          "type": "string",
          "required": false
        },
        "alignment": {
          "description": "Alignment of the text.",
          "type": "string",
          "required": false,
          "enum": [
            "LEFT",
            "RIGHT",
            "CENTER"
          ]
        },
        "fontColor": {
          "description": "Font color of the form field in RGB or HEX format",
          "type": "string",
          "required": false
        },
        "maxLength": {
          "description": "Maximum length of the input text field in terms of no. of characters",
          "type": "integer",
          "required": false
        }
      }
    },
    "ShareCreationResponseList": {
      "id": "ShareCreationResponseList",
      "properties": {
        "shareCreationResponseList": {
          "description": "List of ShareCreationResponse",
          "type": "array",
          "items": {
            "$ref": "ShareCreationResponse"
          },
          "required": true
        }
      }
    },
    "DocumentsImageUrlsInfo": {
      "id": "DocumentsImageUrlsInfo",
      "properties": {
        "supportingDocumentsImageUrlsInfo": {
          "description": "A list of supporting document image URLs info.",
          "type": "array",
          "items": {
            "$ref": "DocumentImageUrlsInfo"
          },
          "required": false
        },
        "originalDocumentsImageUrlsInfo": {
          "description": "A list of original document image URLs info.",
          "type": "array",
          "items": {
            "$ref": "DocumentImageUrlsInfo"
          },
          "required": true
        }
      }
    },
    "DetailedParticipantInfo": {
      "id": "DetailedParticipantInfo",
      "properties": {
        "createdDate": {
          "description": "The date when the participant was added. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
          "type": "date",
          "required": false
        },
        "hidden": {
          "description": "True if the agreement is hidden for the user that is calling the API. Only returned if self is true. Ignored (not required) if modifying a participant (PUT).",
          "type": "boolean",
          "required": false
        },
        "name": {
          "description": "The name of the participant, if available. This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": false
        },
        "self": {
          "description": "True if this participant is the same user that is calling the API. Returned as part of Get. Ignored (not required) if modifying a participant set (PUT).",
          "type": "boolean",
          "required": false
        },
        "company": {
          "description": "The company of the participant, if available. This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": false
        },
        "id": {
          "description": "The unique identifier of the participant. This will be returned as part of Get call but is not mandatory to be passed as part of PUT call for agreements/{id}/members/participantSets/{id}.",
          "type": "string",
          "required": false
        },
        "privateMessage": {
          "description": "The private message of the participant, if available. This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": false
        },
        "userId": {
          "description": "The user ID of the participant. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
          "type": "string",
          "required": false
        },
        "email": {
          "description": "Email of the participant. In case of modifying a participant set (PUT) this is a required field. In case of GET, this is the required field and will always be returned unless it is a fax workflow (legacy agreements) that were created using fax as input",
          "type": "string",
          "required": true
        },
        "securityOption": {
          "description": "Security options that apply to the participant.",
          "type": "ParticipantSecurityOption",
          "items": {
            "$ref": "ParticipantSecurityOption"
          },
          "required": true
        },
        "status": {
          "description": "The status of the participant. This cannot be changed as part of the PUT call. New participants will be ignored if added with a REPLACED status.",
          "type": "string",
          "required": false,
          "enum": [
            "REPLACED",
            "ACTIVE"
          ]
        }
      }
    },
    "FormFieldConditionalAction": {
      "description": "Conditional actions to perfom on this form field.",
      "id": "FormFieldConditionalAction",
      "properties": {
        "predicates": {
          "description": "The predicates to be evaluated in order to determine whether this condition is true",
          "type": "array",
          "items": {
            "$ref": "FormFieldConditionPredicate"
          },
          "required": false
        },
        "anyOrAll": {
          "description": "It indicates if any one of the conditions or all of them have to be true.",
          "type": "string",
          "required": false,
          "enum": [
            "ALL",
            "ANY"
          ]
        },
        "action": {
          "description": "Action to show/hide the form field is to be taken on the basis of evaluation of conditions.",
          "type": "string",
          "required": false,
          "enum": [
            "SHOW",
            "HIDE",
            "DISABLE",
            "ENABLE"
          ]
        }
      }
    },
    "FileUploadOptions": {
      "id": "FileUploadOptions",
      "properties": {
        "canEditFiles": {
          "description": "Whether the file upload section can be edited by adding or removing files. Default value is taken as true. Changing the default value will alter the compose page view configuration for this agreement, but is not an access control mechanism",
          "type": "boolean",
          "required": false
        },
        "localFile": {
          "description": "Whether local file upload button should appear or not. Default value is taken as true",
          "type": "boolean",
          "required": false
        },
        "webConnectors": {
          "description": "Whether link to attach documents from web sources like Dropbox should appear or not. Default value is taken as true",
          "type": "boolean",
          "required": false
        },
        "libraryDocument": {
          "description": "Whether library documents link should appear or not. Default value is taken as true",
          "type": "boolean",
          "required": false
        }
      }
    },
    "FetchedAgreementInfo": {
      "id": "AgreementInfo",
      "properties": {
        "groupId": {
          "description": "The unique identifier of the group to which the agreement belongs to. If not provided during agreement creation, primary group of the creator will be used",
          "type": "string",
          "required": false
        },
        "locale": {
          "description": "The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender",
          "type": "string",
          "required": false
        },
        "type": {
          "description": "The kind of agreement",
          "type": "string",
          "required": false,
          "enum": [
            "AGREEMENT",
            "MEGASIGN_CHILD",
            "WIDGET_INSTANCE"
          ]
        },
        "vaultingInfo": {
          "description": "Vaulting properties that allows Adobe Sign to securely store documents with a vault provider",
          "type": "VaultingInfo",
          "items": {
            "$ref": "VaultingInfo"
          },
          "required": false
        },
        "securityOption": {
          "description": "Optional secondary security parameters for the agreement. Should not be provided in offline agreement creation.",
          "type": "SecurityOption",
          "items": {
            "$ref": "SecurityOption"
          },
          "required": false
        },
        "postSignOption": {
          "description": "URL and associated properties for the success page the user will be taken to after completing the signing process. Should not be provided in offline agreement creation.",
          "type": "PostSignOption",
          "items": {
            "$ref": "PostSignOption"
          },
          "required": false
        },
        "ccs": {
          "description": "A list of one or more CCs that will be copied in the agreement transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file. Should not be provided in offline agreement creation.",
          "type": "array",
          "items": {
            "$ref": "AgreementCcInfo"
          },
          "required": false
        },
        "documentVisibilityEnabled": {
          "description": "If set to true, enable limited document visibility. Should not be provided in offline agreement creation.",
          "type": "boolean",
          "required": false
        },
        "isDocumentRetentionApplied": {
          "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "hasSignerIdentityReport": {
          "description": "True if agreement has signer identity report available.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "lastEventDate": {
          "description": "The date of the last event that occurred for this agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "date",
          "required": false
        },
        "senderEmail": {
          "description": "Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored",
          "type": "string",
          "required": false
        },
        "id": {
          "description": "The unique identifier of the agreement.If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false
        },
        "state": {
          "description": "The state in which the agreement should land. The state field can only be provided in POST calls, will never get returned in GET /agreements/{ID} and will be ignored if provided in PUT /agreements/{ID} call. The eventual status of the agreement can be obtained from GET /agreements/ID",
          "type": "string",
          "required": false,
          "enum": [
            "AUTHORING",
            "DRAFT",
            "IN_PROCESS"
          ]
        },
        "mergeFieldInfo": {
          "description": "Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported",
          "type": "array",
          "items": {
            "$ref": "MergefieldInfo"
          },
          "required": false
        },
        "firstReminderDelay": {
          "description": "Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value canâ€™t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Should not be provided in offline agreement creation.",
          "type": "integer",
          "required": false
        },
        "emailOption": {
          "description": "Email configurations for the agreement. Should not be provided in offline agreement creation or when updating a non draft agreement.",
          "type": "EmailOption",
          "items": {
            "$ref": "EmailOption"
          },
          "required": false
        },
        "signatureType": {
          "description": "Specifies the type of signature you would like to request - written or e-signature. The possible values are <br> ESIGN : Agreement needs to be signed electronically <br>,\nWRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system",
          "type": "string",
          "required": true,
          "enum": [
            "ESIGN",
            "WRITTEN"
          ]
        },
        "externalId": {
          "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Should not be provided in offline agreement creation.",
          "type": "ExternalId",
          "items": {
            "$ref": "ExternalId"
          },
          "required": false
        },
        "message": {
          "description": "An optional message to the participants, describing what is being sent or why their signature is required",
          "type": "string",
          "required": false
        },
        "deviceInfo": {
          "description": "Device info of the offline device. It should only be provided in case of offline agreement creation.",
          "type": "OfflineDeviceInfo",
          "items": {
            "$ref": "OfflineDeviceInfo"
          },
          "required": false
        },
        "parentId": {
          "description": "The parent id of a megaSign child *OR* the originating id of a widget agreement instance",
          "type": "string",
          "required": false
        },
        "reminderFrequency": {
          "description": "Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used. Should not be provided in offline agreement creation. If provided in PUT as a different value than the current one, an error will be thrown.",
          "type": "string",
          "required": false,
          "enum": [
            "DAILY_UNTIL_SIGNED",
            "WEEKDAILY_UNTIL_SIGNED",
            "EVERY_OTHER_DAY_UNTIL_SIGNED",
            "EVERY_THIRD_DAY_UNTIL_SIGNED",
            "EVERY_FIFTH_DAY_UNTIL_SIGNED",
            "WEEKLY_UNTIL_SIGNED",
            "ONCE"
          ]
        },
        "createdDate": {
          "format": "date",
          "description": "Date when agreement was created. This is a server generated attributed and can not be provided in POST/PUT calls. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "participantSetsInfo": {
          "description": "A list of one or more participant set. A participant set may have one or more participant. If any member of the participant set takes the action that has been assigned to the set(Sign/Approve/Acknowledge etc), the action is considered as the action taken by whole participation set. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document",
          "type": "array",
          "items": {
            "$ref": "ParticipantSetInfo"
          },
          "required": true
        },
        "hasFormFieldData": {
          "description": "True if form field data is present.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "expirationTime": {
          "format": "date",
          "description": "Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.",
          "type": "string",
          "required": false
        },
        "formFieldLayerTemplates": {
          "description": "Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified",
          "type": "array",
          "items": {
            "$ref": "FileInfo"
          },
          "required": false
        },
        "name": {
          "description": "The name of the agreement that will be used to identify it, in emails, website and other places",
          "type": "string",
          "required": true
        },
        "fileInfos": {
          "description": "A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified",
          "type": "array",
          "items": {
            "$ref": "FileInfo"
          },
          "required": false
        },
        "workflowId": {
          "description": "The identifier of custom workflow which defines the routing path of an agreement. Should not be provided in offline agreement creation.",
          "type": "string",
          "required": false
        },
        "status": {
          "description": "This is a server generated attribute which provides the detailed status of an agreement.",
          "type": "string",
          "required": true,
          "enum": [
            "OUT_FOR_SIGNATURE",
            "OUT_FOR_DELIVERY",
            "OUT_FOR_ACCEPTANCE",
            "OUT_FOR_FORM_FILLING",
            "OUT_FOR_APPROVAL",
            "AUTHORING",
            "CANCELLED",
            "SIGNED",
            "APPROVED",
            "DELIVERED",
            "ACCEPTED",
            "FORM_FILLED",
            "EXPIRED",
            "ARCHIVED",
            "PREFILL",
            "WIDGET_WAITING_FOR_VERIFICATION",
            "DRAFT",
            "DOCUMENTS_NOT_YET_PROCESSED",
            "WAITING_FOR_FAXIN",
            "WAITING_FOR_VERIFICATION"
          ]
        }
      }
    },
    "DocumentUrl": {
      "id": "DocumentUrl",
      "properties": {
        "url": {
          "description": "Secure URL of the document",
          "type": "string",
          "required": true
        }
      }
    },
    "MembersInfo": {
      "id": "MembersInfo",
      "properties": {
        "participantSets": {
          "description": "Information about the participant Sets.",
          "type": "array",
          "items": {
            "$ref": "DetailedParticipantSetInfo"
          },
          "required": true
        },
        "ccsInfo": {
          "description": "Information of CC participants of the agreement.",
          "type": "array",
          "items": {
            "$ref": "CCParticipantInfo"
          },
          "required": true
        },
        "nextParticipantSets": {
          "description": "Information of next participant sets.",
          "type": "array",
          "items": {
            "$ref": "DetailedParticipantSetInfo"
          },
          "required": true
        },
        "senderInfo": {
          "description": "Information of the sender of the agreement.",
          "type": "SenderInfo",
          "items": {
            "$ref": "SenderInfo"
          },
          "required": true
        },
        "sharesInfo": {
          "description": "Information of the participants with whom the agreement has been shared.",
          "type": "array",
          "items": {
            "$ref": "ShareParticipantInfo"
          },
          "required": true
        }
      }
    },
    "AgreementView": {
      "id": "AgreementView",
      "properties": {
        "isCurrent": {
          "description": "True if this view is the current view",
          "type": "boolean",
          "required": true
        },
        "embeddedCode": {
          "description": "Embedded code of url of resource ",
          "type": "string",
          "required": false
        },
        "name": {
          "description": "Name of the requested agreement view",
          "showInSampleRequest": true,
          "type": "string",
          "required": true,
          "enum": [
            "COMPOSE",
            "MODIFY",
            "PREFILL",
            "AUTHORING",
            "SEND_PROGRESS",
            "POST_CREATE",
            "DOCUMENT",
            "MANAGE",
            "SIGNING",
            "ALL"
          ]
        },
        "expiration": {
          "format": "date",
          "description": "Expiration of user url ",
          "type": "string",
          "required": false
        },
        "url": {
          "description": "Url of resource location",
          "type": "string",
          "required": false
        }
      }
    },
    "AgreementEventList": {
      "id": "EventList",
      "properties": {
        "events": {
          "description": "An array of event objects.",
          "type": "array",
          "items": {
            "$ref": "AgreementEvent"
          },
          "required": true
        }
      }
    },
    "ShareCreationInfoList": {
      "id": "ShareCreationInfoList",
      "properties": {
        "shareCreationInfo": {
          "description": "List of ShareCreationInfo",
          "type": "array",
          "items": {
            "$ref": "ShareCreationInfo"
          },
          "required": true
        }
      }
    },
    "AgreementDocumentImageUrlsInfo": {
      "id": "AgreementDocumentImageUrlsInfo",
      "properties": {
        "documentImageUrlsList": {
          "description": "A list of documents image URLs.",
          "type": "array",
          "items": {
            "$ref": "DocumentImageUrls"
          },
          "required": true
        },
        "documentId": {
          "description": "Id of the document",
          "type": "string",
          "required": true
        }
      }
    },
    "ShareCreationInfo": {
      "id": "ShareCreationInfo",
      "properties": {
        "message": {
          "description": "Optional message to the sharee",
          "type": "string",
          "required": false
        },
        "email": {
          "description": "The email address of the member with whom the agreement will be shared",
          "type": "string",
          "required": true
        }
      }
    },
    "DigitalSignatureInfo": {
      "id": "DigitalSignatureInfo",
      "properties": {
        "name": {
          "description": "Name captured during digital signing",
          "type": "string",
          "required": true
        },
        "company": {
          "description": "Company name captured during digital signing",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "Email captured during digital signing",
          "type": "string",
          "required": true
        }
      }
    },
    "AccountSharerInfo": {
      "id": "AccountSharerInfo",
      "properties": {
        "permissions": {
          "description": "A list of permissions given for this account sharing.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "VIEW",
              "SEND",
              "MODIFY"
            ]
          },
          "required": true
        },
        "fullName": {
          "description": "Full name of this account sharer.",
          "type": "string",
          "required": true
        },
        "userId": {
          "description": "A unique identifier of the user resource for REST APIs as issued by Sign.",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "The email address of the user",
          "type": "string",
          "required": true
        }
      }
    },
    "UserAgreements": {
      "id": "UserAgreements",
      "properties": {
        "userAgreementList": {
          "description": "An array of UserAgreement items",
          "type": "array",
          "items": {
            "$ref": "UserAgreement"
          },
          "required": true
        },
        "page": {
          "description": "Pagination information for navigating through the response",
          "type": "PageInfo",
          "items": {
            "$ref": "PageInfo"
          },
          "required": true
        }
      }
    },
    "VisibilityInfo": {
      "id": "VisibilityInfo",
      "properties": {
        "visibility": {
          "description": "Specifies the visibility. The possible values are HIDE or SHOW",
          "type": "string",
          "required": true,
          "enum": [
            "SHOW",
            "HIDE"
          ]
        }
      }
    },
    "ParticipantSetInfo": {
      "id": "ParticipantSetInfo",
      "properties": {
        "role": {
          "description": "Role assumed by all participants in the set (signer, approver etc.)",
          "type": "string",
          "required": true,
          "enum": [
            "SIGNER",
            "APPROVER",
            "ACCEPTOR",
            "CERTIFIED_RECIPIENT",
            "FORM_FILLER",
            "DELEGATE_TO_SIGNER",
            "DELEGATE_TO_APPROVER",
            "DELEGATE_TO_ACCEPTOR",
            "DELEGATE_TO_CERTIFIED_RECIPIENT",
            "DELEGATE_TO_FORM_FILLER",
            "SHARE"
          ]
        },
        "visiblePages": {
          "description": "When you enable limited document visibility (documentVisibilityEnabled), you can specify which file (fileInfo) should be made visible to which specific participant set.<br>Specify one or more label values of a fileInfos element.<br>Each signer participant sets must contain at least one required signature field in at least one visible file included in this API call; if not a page with a signature field is automatically appended for any missing participant sets. If there is a possibility that one or more participant sets do not have a required signature field in the files included in the API call, all signer participant sets should include a special index value of '0' to make this automatically appended signature page visible to the signer. Not doing so may result in an error. For all other roles, you may omit this value to exclude this page.",
          "type": "array",
          "items": {
            "$ref": "string"
          },
          "required": false
        },
        "name": {
          "description": "Name of the participant set (it can be empty, but if present it must be unique within a single agreement). Maximum no of characters in participant set name is restricted to 255",
          "type": "string",
          "required": false
        },
        "id": {
          "description": "The unique identifier of the participant. This will be ignored as part of POST or PUT calls. The Id might be null in draft state",
          "type": "string",
          "required": false
        },
        "label": {
          "description": "The unique label of a participant set.<br>For custom workflows, label specified in the participation set should map it to the participation step in the custom workflow.",
          "type": "string",
          "required": false
        },
        "privateMessage": {
          "description": "Participant set's private message - all participants in the set will receive the same message",
          "type": "string",
          "required": false
        },
        "memberInfos": {
          "description": "Array of ParticipantInfo objects, containing participant-specific data (e.g. email). All participants in the array belong to the same set",
          "type": "array",
          "items": {
            "$ref": "ParticipantSetMemberInfo"
          },
          "required": true
        },
        "order": {
          "description": "Index indicating position at which signing group needs to sign. Signing group to sign at first place is assigned a 1 index. Different signingOrder specified in input should form a valid consecutive increasing sequence of integers. Otherwise signingOrder will be considered invalid. No signingOrder should be specified for SHARE role",
          "type": "integer",
          "required": true
        }
      }
    },
    "ParticipantSecurityOption": {
      "id": "ParticipantSecurityOption",
      "properties": {
        "password": {
          "description": "The password required for the participant to view and sign the document. Note that AdobeSign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. The password will not be returned in GET call. When replacing a participant that has PASSWORD authentication specified, you must supply a password for the new participant.",
          "type": "string",
          "required": false
        },
        "authenticationMethod": {
          "description": "The authentication method for the participants to have access to view and sign the document. When replacing a participant that has PASSWORD or PHONE authentication specified, you must supply a password or phone number for the new participant, and you cannot change the authentication method",
          "type": "string",
          "required": true,
          "enum": [
            "NONE",
            "PASSWORD",
            "PHONE",
            "KBA",
            "WEB_IDENTITY",
            "ADOBE_SIGN",
            "GOV_ID"
          ]
        },
        "phoneInfo": {
          "description": "The phoneInfo required for the participant to view and sign the document",
          "type": "PhoneInfo",
          "items": {
            "$ref": "PhoneInfo"
          },
          "required": false
        }
      }
    },
    "PageImageUrl": {
      "id": "PageImageUrl",
      "properties": {
        "pageNumber": {
          "description": "Page number within the document.",
          "type": "integer",
          "required": true
        },
        "url": {
          "description": "An image url.",
          "type": "string",
          "required": true
        }
      }
    },
    "Note": {
      "id": "Note",
      "properties": {
        "note": {
          "description": "Content of Note field",
          "type": "string",
          "required": true
        }
      }
    },
    "AgreementViewInfo": {
      "id": "AgreementViewInfo",
      "properties": {
        "composeViewConfiguration": {
          "description": "Compose page view configuration",
          "type": "ComposeViewConfiguration",
          "items": {
            "$ref": "ComposeViewConfiguration"
          },
          "required": false
        },
        "commonViewConfiguration": {
          "description": "Common view configuration for all the available views",
          "type": "CommonViewConfiguration",
          "items": {
            "$ref": "CommonViewConfiguration"
          },
          "required": false
        },
        "name": {
          "description": "Name of the requested agreement view",
          "showInSampleRequest": true,
          "type": "string",
          "required": true,
          "enum": [
            "COMPOSE",
            "MODIFY",
            "PREFILL",
            "AUTHORING",
            "SEND_PROGRESS",
            "POST_CREATE",
            "DOCUMENT",
            "MANAGE",
            "SIGNING",
            "ALL"
          ]
        }
      }
    },
    "AgreementViews": {
      "id": "AgreementViews",
      "properties": {
        "agreementViewList": {
          "description": "List of agreement views",
          "type": "array",
          "items": {
            "$ref": "AgreementView"
          },
          "required": true
        }
      }
    },
    "AgreementCreationInfo": {
      "id": "AgreementInfo",
      "properties": {
        "groupId": {
          "description": "The unique identifier of the group to which the agreement belongs to. If not provided during agreement creation, primary group of the creator will be used",
          "type": "string",
          "required": false
        },
        "locale": {
          "description": "The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender",
          "type": "string",
          "required": false
        },
        "type": {
          "description": "The kind of agreement",
          "type": "string",
          "required": false,
          "enum": [
            "AGREEMENT",
            "MEGASIGN_CHILD",
            "WIDGET_INSTANCE"
          ]
        },
        "vaultingInfo": {
          "description": "Vaulting properties that allows Adobe Sign to securely store documents with a vault provider",
          "type": "VaultingInfo",
          "items": {
            "$ref": "VaultingInfo"
          },
          "required": false
        },
        "securityOption": {
          "description": "Optional secondary security parameters for the agreement. Should not be provided in offline agreement creation.",
          "type": "SecurityOption",
          "items": {
            "$ref": "SecurityOption"
          },
          "required": false
        },
        "postSignOption": {
          "description": "URL and associated properties for the success page the user will be taken to after completing the signing process. Should not be provided in offline agreement creation.",
          "type": "PostSignOption",
          "items": {
            "$ref": "PostSignOption"
          },
          "required": false
        },
        "ccs": {
          "description": "A list of one or more CCs that will be copied in the agreement transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file. Should not be provided in offline agreement creation.",
          "type": "array",
          "items": {
            "$ref": "AgreementCcInfo"
          },
          "required": false
        },
        "documentVisibilityEnabled": {
          "description": "If set to true, enable limited document visibility. Should not be provided in offline agreement creation.",
          "type": "boolean",
          "required": false
        },
        "isDocumentRetentionApplied": {
          "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "hasSignerIdentityReport": {
          "description": "True if agreement has signer identity report available.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "lastEventDate": {
          "description": "The date of the last event that occurred for this agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "date",
          "required": false
        },
        "senderEmail": {
          "description": "Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored",
          "type": "string",
          "required": false
        },
        "id": {
          "description": "The unique identifier of the agreement.If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false
        },
        "state": {
          "description": "The state in which the agreement should land. The state field can only be provided in POST calls, will never get returned in GET /agreements/{ID} and will be ignored if provided in PUT /agreements/{ID} call. The eventual status of the agreement can be obtained from GET /agreements/ID",
          "type": "string",
          "required": true,
          "enum": [
            "AUTHORING",
            "DRAFT",
            "IN_PROCESS"
          ]
        },
        "mergeFieldInfo": {
          "description": "Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported",
          "type": "array",
          "items": {
            "$ref": "MergefieldInfo"
          },
          "required": false
        },
        "firstReminderDelay": {
          "description": "Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value canâ€™t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Should not be provided in offline agreement creation.",
          "type": "integer",
          "required": false
        },
        "emailOption": {
          "description": "Email configurations for the agreement. Should not be provided in offline agreement creation or when updating a non draft agreement.",
          "type": "EmailOption",
          "items": {
            "$ref": "EmailOption"
          },
          "required": false
        },
        "signatureType": {
          "description": "Specifies the type of signature you would like to request - written or e-signature. The possible values are <br> ESIGN : Agreement needs to be signed electronically <br>,\nWRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system",
          "type": "string",
          "required": true,
          "enum": [
            "ESIGN",
            "WRITTEN"
          ]
        },
        "externalId": {
          "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Should not be provided in offline agreement creation.",
          "type": "ExternalId",
          "items": {
            "$ref": "ExternalId"
          },
          "required": false
        },
        "message": {
          "description": "An optional message to the participants, describing what is being sent or why their signature is required",
          "type": "string",
          "required": false
        },
        "deviceInfo": {
          "description": "Device info of the offline device. It should only be provided in case of offline agreement creation.",
          "type": "OfflineDeviceInfo",
          "items": {
            "$ref": "OfflineDeviceInfo"
          },
          "required": false
        },
        "parentId": {
          "description": "The parent id of a megaSign child *OR* the originating id of a widget agreement instance",
          "type": "string",
          "required": false
        },
        "reminderFrequency": {
          "description": "Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used. Should not be provided in offline agreement creation. If provided in PUT as a different value than the current one, an error will be thrown.",
          "type": "string",
          "required": false,
          "enum": [
            "DAILY_UNTIL_SIGNED",
            "WEEKDAILY_UNTIL_SIGNED",
            "EVERY_OTHER_DAY_UNTIL_SIGNED",
            "EVERY_THIRD_DAY_UNTIL_SIGNED",
            "EVERY_FIFTH_DAY_UNTIL_SIGNED",
            "WEEKLY_UNTIL_SIGNED",
            "ONCE"
          ]
        },
        "createdDate": {
          "format": "date",
          "description": "Date when agreement was created. This is a server generated attributed and can not be provided in POST/PUT calls. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "participantSetsInfo": {
          "description": "A list of one or more participant set. A participant set may have one or more participant. If any member of the participant set takes the action that has been assigned to the set(Sign/Approve/Acknowledge etc), the action is considered as the action taken by whole participation set. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document",
          "type": "array",
          "items": {
            "$ref": "ParticipantSetInfo"
          },
          "required": true
        },
        "hasFormFieldData": {
          "description": "True if form field data is present.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "expirationTime": {
          "format": "date",
          "description": "Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.",
          "type": "string",
          "required": false
        },
        "formFieldLayerTemplates": {
          "description": "Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified",
          "type": "array",
          "items": {
            "$ref": "FileInfo"
          },
          "required": false
        },
        "name": {
          "description": "The name of the agreement that will be used to identify it, in emails, website and other places",
          "type": "string",
          "required": true
        },
        "fileInfos": {
          "description": "A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified",
          "type": "array",
          "items": {
            "$ref": "FileInfo"
          },
          "required": true
        },
        "workflowId": {
          "description": "The identifier of custom workflow which defines the routing path of an agreement. Should not be provided in offline agreement creation.",
          "type": "string",
          "required": false
        },
        "status": {
          "description": "This is a server generated attribute which provides the detailed status of an agreement.",
          "type": "string",
          "required": false,
          "enum": [
            "OUT_FOR_SIGNATURE",
            "OUT_FOR_DELIVERY",
            "OUT_FOR_ACCEPTANCE",
            "OUT_FOR_FORM_FILLING",
            "OUT_FOR_APPROVAL",
            "AUTHORING",
            "CANCELLED",
            "SIGNED",
            "APPROVED",
            "DELIVERED",
            "ACCEPTED",
            "FORM_FILLED",
            "EXPIRED",
            "ARCHIVED",
            "PREFILL",
            "WIDGET_WAITING_FOR_VERIFICATION",
            "DRAFT",
            "DOCUMENTS_NOT_YET_PROCESSED",
            "WAITING_FOR_FAXIN",
            "WAITING_FOR_VERIFICATION"
          ]
        }
      }
    },
    "ParticipantSetMemberInfo": {
      "id": "ParticipantInfo",
      "properties": {
        "id": {
          "description": "The unique identifier of the participant. This will be ignored as part of POST or PUT calls. The Id might be null in draft state",
          "type": "string",
          "required": false
        },
        "email": {
          "description": "Email of the participant. In case of creating new Agreements(POST/PUT), this is a required field.",
          "type": "string",
          "required": true
        },
        "securityOption": {
          "description": "Security options that apply to the participant",
          "type": "ParticipantSecurityOption",
          "items": {
            "$ref": "ParticipantSecurityOption"
          },
          "required": false
        }
      }
    },
    "MyAgreementInfo": {
      "id": "MyAgreementInfo",
      "properties": {
        "accountSharers": {
          "description": "A list of account sharer in relation to the api caller and this resource.",
          "type": "array",
          "items": {
            "$ref": "AccountSharerInfo"
          },
          "required": true
        }
      }
    },
    "DocumentPageInfo": {
      "id": "DocumentPageInfo",
      "properties": {
        "rotation": {
          "format": "double",
          "description": "Rotation angle of the page in clockwise direction in degree",
          "type": "number",
          "required": true
        },
        "width": {
          "format": "double",
          "description": "Width of the page",
          "type": "number",
          "required": true
        },
        "index": {
          "description": "Index of the page in combined document starting from 1",
          "type": "integer",
          "required": true
        },
        "height": {
          "format": "double",
          "description": "Height of the page",
          "type": "number",
          "required": true
        }
      }
    },
    "AgreementInfo": {
      "id": "AgreementInfo",
      "properties": {
        "groupId": {
          "description": "The unique identifier of the group to which the agreement belongs to. If not provided during agreement creation, primary group of the creator will be used",
          "type": "string",
          "required": false
        },
        "locale": {
          "description": "The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender",
          "type": "string",
          "required": false
        },
        "type": {
          "description": "The kind of agreement",
          "type": "string",
          "required": false,
          "enum": [
            "AGREEMENT",
            "MEGASIGN_CHILD",
            "WIDGET_INSTANCE"
          ]
        },
        "vaultingInfo": {
          "description": "Vaulting properties that allows Adobe Sign to securely store documents with a vault provider",
          "type": "VaultingInfo",
          "items": {
            "$ref": "VaultingInfo"
          },
          "required": false
        },
        "securityOption": {
          "description": "Optional secondary security parameters for the agreement. Should not be provided in offline agreement creation.",
          "type": "SecurityOption",
          "items": {
            "$ref": "SecurityOption"
          },
          "required": false
        },
        "postSignOption": {
          "description": "URL and associated properties for the success page the user will be taken to after completing the signing process. Should not be provided in offline agreement creation.",
          "type": "PostSignOption",
          "items": {
            "$ref": "PostSignOption"
          },
          "required": false
        },
        "ccs": {
          "description": "A list of one or more CCs that will be copied in the agreement transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file. Should not be provided in offline agreement creation.",
          "type": "array",
          "items": {
            "$ref": "AgreementCcInfo"
          },
          "required": false
        },
        "documentVisibilityEnabled": {
          "description": "If set to true, enable limited document visibility. Should not be provided in offline agreement creation.",
          "type": "boolean",
          "required": false
        },
        "isDocumentRetentionApplied": {
          "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "hasSignerIdentityReport": {
          "description": "True if agreement has signer identity report available.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "lastEventDate": {
          "description": "The date of the last event that occurred for this agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "date",
          "required": false
        },
        "senderEmail": {
          "description": "Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored",
          "type": "string",
          "required": false
        },
        "id": {
          "description": "The unique identifier of the agreement.If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false
        },
        "state": {
          "description": "The state in which the agreement should land. The state field can only be provided in POST calls, will never get returned in GET /agreements/{ID} and will be ignored if provided in PUT /agreements/{ID} call. The eventual status of the agreement can be obtained from GET /agreements/ID",
          "type": "string",
          "required": false,
          "enum": [
            "AUTHORING",
            "DRAFT",
            "IN_PROCESS"
          ]
        },
        "mergeFieldInfo": {
          "description": "Optional default values for fields to merge into the document. The values will be presented to the signers for editable fields; for read-only fields the provided values will not be editable during the signing process. Merging data into fields is currently not supported when used with libraryDocumentId or libraryDocumentName. Only file and url are currently supported",
          "type": "array",
          "items": {
            "$ref": "MergefieldInfo"
          },
          "required": false
        },
        "firstReminderDelay": {
          "description": "Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value canâ€™t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Should not be provided in offline agreement creation.",
          "type": "integer",
          "required": false
        },
        "emailOption": {
          "description": "Email configurations for the agreement. Should not be provided in offline agreement creation or when updating a non draft agreement.",
          "type": "EmailOption",
          "items": {
            "$ref": "EmailOption"
          },
          "required": false
        },
        "signatureType": {
          "description": "Specifies the type of signature you would like to request - written or e-signature. The possible values are <br> ESIGN : Agreement needs to be signed electronically <br>,\nWRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system",
          "type": "string",
          "required": true,
          "enum": [
            "ESIGN",
            "WRITTEN"
          ]
        },
        "externalId": {
          "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried. Should not be provided in offline agreement creation.",
          "type": "ExternalId",
          "items": {
            "$ref": "ExternalId"
          },
          "required": false
        },
        "message": {
          "description": "An optional message to the participants, describing what is being sent or why their signature is required",
          "type": "string",
          "required": false
        },
        "deviceInfo": {
          "description": "Device info of the offline device. It should only be provided in case of offline agreement creation.",
          "type": "OfflineDeviceInfo",
          "items": {
            "$ref": "OfflineDeviceInfo"
          },
          "required": false
        },
        "parentId": {
          "description": "The parent id of a megaSign child *OR* the originating id of a widget agreement instance",
          "type": "string",
          "required": false
        },
        "reminderFrequency": {
          "description": "Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used. Should not be provided in offline agreement creation. If provided in PUT as a different value than the current one, an error will be thrown.",
          "type": "string",
          "required": false,
          "enum": [
            "DAILY_UNTIL_SIGNED",
            "WEEKDAILY_UNTIL_SIGNED",
            "EVERY_OTHER_DAY_UNTIL_SIGNED",
            "EVERY_THIRD_DAY_UNTIL_SIGNED",
            "EVERY_FIFTH_DAY_UNTIL_SIGNED",
            "WEEKLY_UNTIL_SIGNED",
            "ONCE"
          ]
        },
        "createdDate": {
          "format": "date",
          "description": "Date when agreement was created. This is a server generated attributed and can not be provided in POST/PUT calls. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "participantSetsInfo": {
          "description": "A list of one or more participant set. A participant set may have one or more participant. If any member of the participant set takes the action that has been assigned to the set(Sign/Approve/Acknowledge etc), the action is considered as the action taken by whole participation set. For regular (non-MegaSign) documents, there is no limit on the number of electronic signatures in a single document. Written signatures are limited to four per document",
          "type": "array",
          "items": {
            "$ref": "ParticipantSetInfo"
          },
          "required": true
        },
        "hasFormFieldData": {
          "description": "True if form field data is present.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "expirationTime": {
          "format": "date",
          "description": "Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.",
          "type": "string",
          "required": false
        },
        "formFieldLayerTemplates": {
          "description": "Specifies the form field layer template or source of form fields to apply on the files in this transaction. If specified, the FileInfo for this parameter must refer to a form field layer template via libraryDocumentId or libraryDocumentName, or if specified via transientDocumentId or documentURL, it must be of a supported file type. Note: Only one of the four parameters in every FileInfo object must be specified",
          "type": "array",
          "items": {
            "$ref": "FileInfo"
          },
          "required": false
        },
        "name": {
          "description": "The name of the agreement that will be used to identify it, in emails, website and other places",
          "type": "string",
          "required": true
        },
        "fileInfos": {
          "description": "A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified",
          "type": "array",
          "items": {
            "$ref": "FileInfo"
          },
          "required": true
        },
        "workflowId": {
          "description": "The identifier of custom workflow which defines the routing path of an agreement. Should not be provided in offline agreement creation.",
          "type": "string",
          "required": false
        },
        "status": {
          "description": "This is a server generated attribute which provides the detailed status of an agreement.",
          "type": "string",
          "required": true,
          "enum": [
            "OUT_FOR_SIGNATURE",
            "OUT_FOR_DELIVERY",
            "OUT_FOR_ACCEPTANCE",
            "OUT_FOR_FORM_FILLING",
            "OUT_FOR_APPROVAL",
            "AUTHORING",
            "CANCELLED",
            "SIGNED",
            "APPROVED",
            "DELIVERED",
            "ACCEPTED",
            "FORM_FILLED",
            "EXPIRED",
            "ARCHIVED",
            "PREFILL",
            "WIDGET_WAITING_FOR_VERIFICATION",
            "DRAFT",
            "DOCUMENTS_NOT_YET_PROCESSED",
            "WAITING_FOR_FAXIN",
            "WAITING_FOR_VERIFICATION"
          ]
        }
      }
    },
    "FormFieldMergeInfo": {
      "description": "Data for updating the default values of existing form fields",
      "id": "FormFieldMergeInfo",
      "properties": {
        "fieldMergeInfos": {
          "description": "A mapping of field names to default values",
          "type": "array",
          "items": {
            "$ref": "MergefieldInfo"
          },
          "required": false
        }
      }
    },
    "RemindersResponse": {
      "id": "RemindersResponse",
      "properties": {
        "reminderInfoList": {
          "description": "A list of one or more reminders created on the agreement specified by the unique identifier agreementId by the user invoking the API.",
          "type": "array",
          "items": {
            "$ref": "ReminderInfo"
          },
          "required": true
        }
      }
    },
    "AgreementRejectionInfo": {
      "id": "AgreementRejectionInfo",
      "properties": {
        "comment": {
          "description": "Comment describing the reason to reject this agreement.",
          "type": "string",
          "required": true
        }
      }
    },
    "AgreementCreationResponse": {
      "description": "A JSON  that contains both the id of the newly created agreement and URL / embedded code to direct the user to tne next step in the creation process.",
      "id": "AgreementCreationResponse",
      "properties": {
        "id": {
          "description": "The unique identifier of the agreement",
          "type": "string",
          "required": true
        }
      }
    },
    "DetailedParticipantSetInfo": {
      "id": "DetailedParticipantSetInfo",
      "properties": {
        "role": {
          "description": "Role assumed by all participants in the set (signer, approver etc.). This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": true,
          "enum": [
            "SIGNER",
            "SENDER",
            "APPROVER",
            "ACCEPTOR",
            "CERTIFIED_RECIPIENT",
            "FORM_FILLER",
            "DELEGATE_TO_SIGNER",
            "DELEGATE_TO_APPROVER",
            "DELEGATE_TO_ACCEPTOR",
            "DELEGATE_TO_CERTIFIED_RECIPIENT",
            "DELEGATE_TO_FORM_FILLER",
            "SHARE"
          ]
        },
        "name": {
          "description": "Name of ParticipantSet (it can be empty, but needs not to be unique in a single agreement). Maximum no of characters in participant set name is restricted to 255. This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": false
        },
        "id": {
          "description": "The unique identifier of the participant set. This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": false
        },
        "privateMessage": {
          "description": "Participant set's private message - all participants in the set will receive the same message. This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": false
        },
        "memberInfos": {
          "description": "Array of ParticipantInfo objects, containing participant-specific data (e.g. email). All participants in the array belong to the same set",
          "type": "array",
          "items": {
            "$ref": "DetailedParticipantInfo"
          },
          "required": true
        },
        "order": {
          "description": "Index indicating sequential signing group (specified for hybrid routing). This cannot be changed as part of the PUT call.",
          "type": "integer",
          "required": true
        },
        "status": {
          "description": "The agreement status with respect to the participant set. This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": false,
          "enum": [
            "CANCELLED",
            "COMPLETED",
            "EXPIRED",
            "NOT_YET_VISIBLE",
            "WAITING_FOR_OTHERS",
            "WAITING_FOR_MY_APPROVAL",
            "WAITING_FOR_AUTHORING",
            "WAITING_FOR_MY_ACKNOWLEDGEMENT",
            "WAITING_FOR_MY_ACCEPTANCE",
            "WAITING_FOR_MY_FORM_FILLING",
            "WAITING_FOR_MY_DELEGATION",
            "WAITING_FOR_MY_SIGNATURE",
            "WAITING_FOR_MY_VERIFICATION",
            "WAITING_FOR_PREFILL"
          ]
        }
      }
    },
    "SupportingDocument": {
      "id": "SupportingDocument",
      "properties": {
        "displayLabel": {
          "description": "Display name of the document",
          "type": "string",
          "required": true
        },
        "participantId": {
          "description": "The unique identifier of the participant that uploaded the supporting document",
          "type": "string",
          "required": true
        },
        "numPages": {
          "description": "Number of pages in the document",
          "type": "integer",
          "required": true
        },
        "fieldName": {
          "description": "The name of the supporting document field",
          "type": "string",
          "required": true
        },
        "id": {
          "description": "Id representing the document",
          "type": "string",
          "required": true
        },
        "mimeType": {
          "description": "Mime-type of the document",
          "type": "string",
          "required": true
        }
      }
    },
    "MergefieldInfo": {
      "id": "MergefieldInfo",
      "properties": {
        "fieldName": {
          "description": "The name of the field",
          "type": "string",
          "required": true
        },
        "defaultValue": {
          "description": "The default value of the field",
          "type": "string",
          "required": true
        }
      }
    },
    "CCParticipantInfo": {
      "id": "CCParticipantInfo",
      "properties": {
        "participantId": {
          "description": " The unique identifier of the CC participant of the agreement.",
          "type": "string",
          "required": true
        },
        "hidden": {
          "description": "True if the agreement is hidden for the user that is calling the API. Only returned if self is true.",
          "type": "boolean",
          "required": true
        },
        "name": {
          "description": "Name of the CC participant, if available.",
          "type": "string",
          "required": true
        },
        "self": {
          "description": "True if the CC participant is the same user that is calling the API.",
          "type": "boolean",
          "required": true
        },
        "company": {
          "description": "Company of the CC participant, if available.",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "Email of the CC participant of the agreement",
          "type": "string",
          "required": true
        }
      }
    },
    "PostSignOption": {
      "id": "PostSignOption",
      "properties": {
        "redirectUrl": {
          "description": "A publicly accessible url to which the user will be sent after successfully completing the signing process",
          "type": "string",
          "required": false
        },
        "redirectDelay": {
          "description": "The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page",
          "type": "integer",
          "required": false
        }
      }
    },
    "SecurityOption": {
      "id": "SecurityOption",
      "properties": {
        "openPassword": {
          "description": "The secondary password that will be used to secure the PDF document. Note that AdobeSign will never show this password to anyone, so you will need to separately communicate it to any relevant parties",
          "type": "string",
          "required": false
        }
      }
    },
    "CombinedDocumentPagesInfo": {
      "id": "CombinedDocumentPagesInfo",
      "properties": {
        "documentPagesInfo": {
          "description": "List of basic information of all pages of the combined document of an Agreement.",
          "type": "array",
          "items": {
            "$ref": "DocumentPageInfo"
          },
          "required": true
        }
      }
    },
    "FormFieldHyperlink": {
      "description": "Hyperlink-specific data for hyperlink form fields",
      "id": "FormFieldHyperlink",
      "properties": {
        "linkType": {
          "description": "Type of link in an agreement.",
          "type": "string",
          "required": false,
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "FROM_TEXT"
          ]
        },
        "documentLocation": {
          "description": "Location on the document pointed by the link in case of INTERNAL type link",
          "type": "FormFieldLocation",
          "items": {
            "$ref": "FormFieldLocation"
          },
          "required": false
        },
        "url": {
          "description": "URL, in case of EXTERNAL type link",
          "type": "string",
          "required": false
        }
      }
    },
    "DelegatedParticipantSecurityOption": {
      "id": "DelegatedParticipantSecurityOption",
      "properties": {
        "phoneInfo": {
          "description": "The phoneInfo required for the participant to view and sign the document",
          "type": "PhoneInfo",
          "items": {
            "$ref": "PhoneInfo"
          },
          "required": false
        }
      }
    },
    "VaultingInfo": {
      "id": "VaultingInfo",
      "properties": {
        "enabled": {
          "description": "For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted",
          "type": "boolean",
          "required": false
        }
      }
    },
    "AgreementFormFields": {
      "description": "A JSON list of all of the fields for a form",
      "id": "AgreementFormFields",
      "properties": {
        "fields": {
          "description": "List of the form fields in an agreement",
          "type": "array",
          "items": {
            "$ref": "FormField"
          },
          "required": true
        }
      }
    },
    "SenderInfo": {
      "id": "SenderInfo",
      "properties": {
        "participantId": {
          "description": " The unique identifier of the sender of the agreement.",
          "type": "string",
          "required": true
        },
        "createdDate": {
          "description": "The date when the sender was added. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
          "type": "date",
          "required": false
        },
        "hidden": {
          "description": "True if the agreement is hidden for the user that is calling the API. Only returned if self is true.",
          "type": "boolean",
          "required": true
        },
        "name": {
          "description": "Name of the sender, if available.",
          "type": "string",
          "required": true
        },
        "self": {
          "description": "True if the sender is the same user that is calling the API.",
          "type": "boolean",
          "required": true
        },
        "company": {
          "description": "Company of the sender, if available.",
          "type": "string",
          "required": true
        },
        "userId": {
          "description": "The user ID of the sender. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
          "type": "string",
          "required": false
        },
        "email": {
          "description": "Email of the sender of the agreement.",
          "type": "string",
          "required": true
        },
        "status": {
          "description": "The agreement status with respect to the participant set. This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": true,
          "enum": [
            "CANCELLED",
            "COMPLETED",
            "EXPIRED",
            "NOT_YET_VISIBLE",
            "WAITING_FOR_AUTHORING",
            "WAITING_FOR_MY_DELEGATION",
            "WAITING_FOR_MY_ACCEPTANCE",
            "WAITING_FOR_MY_ACKNOWLEDGEMENT",
            "WAITING_FOR_MY_APPROVAL",
            "WAITING_FOR_MY_FORM_FILLING",
            "WAITING_FOR_MY_SIGNATURE",
            "WAITING_FOR_OTHERS"
          ]
        }
      }
    },
    "AgreementEvent": {
      "id": "Event",
      "properties": {
        "date": {
          "format": "date",
          "description": "The date of the audit event. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": true
        },
        "initiatingUserName": {
          "description": "Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
          "type": "string",
          "required": true
        },
        "description": {
          "description": "A description of the audit event",
          "type": "string",
          "required": true
        },
        "actingUserName": {
          "description": "The name of the acting user",
          "type": "string",
          "required": true
        },
        "actingUserIpAddress": {
          "description": "The IP address of the user that created the event",
          "type": "string",
          "required": true
        },
        "participantEmail": {
          "description": "Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
          "type": "string",
          "required": true
        },
        "type": {
          "description": "Type of agreement event",
          "type": "string",
          "required": true,
          "enum": [
            "ACCESS_CODE_GENERATED",
            "ACCESS_CODE_CONSUMED",
            "AUTO_CANCELLED_CONVERSION_PROBLEM",
            "ACTION_AUTO_DELEGATED",
            "ACTION_COMPLETED",
            "ACTION_COMPLETED_HOSTED",
            "ACTION_COMPLETED_OFFLINE",
            "ACTION_COMPLETED_OFFLINE_HOSTED",
            "ACTION_COMPLETED_WIDGET_VERIFIED",
            "ACTION_COMPLETED_WIDGET_VERIFIED_API_TOKEN",
            "ACTION_COMPLETED_WIDGET_VERIFICATION_WAIVED",
            "ACTION_DELEGATED",
            "ACTION_REPLACED_SIGNER",
            "ACTION_REQUESTED",
            "CREATED",
            "CREATED_FROM_WIDGET",
            "CREATED_OFFLINE",
            "CREATED_VIA_UPLOAD",
            "CREATED_VIA_ACROBAT",
            "CREATED_VIA_READER",
            "ACTIVATED",
            "DIGITAL_SIGN_UIDAI_SIGNER_CONSENT",
            "DIGSIGNED",
            "DEACTIVATED",
            "DOCUMENTS_DELETED",
            "DOWNLOADED",
            "EMAIL_BOUNCED",
            "EMAIL_VIEWED",
            "EXPIRED",
            "EXPIRED_AUTOMATICALLY",
            "FAXED_BY_SENDER",
            "FAXIN_RECEIVED",
            "KBA_AUTHENTICATED",
            "MODIFIED",
            "OFFLINE_SYNC",
            "OTHER",
            "PAID",
            "PRESIGNED",
            "RECALLED",
            "RECALLED_MAX_SIGNING_KBA_ATTEMPTS",
            "RECALLED_MAX_SIGNING_PASSWORD_ATTEMPTS",
            "RECALLED_MAX_SIGNING_PHONE_ATTEMPTS",
            "REJECTED",
            "SENDER_CREATED_NEW_REVISION",
            "SHARED",
            "SIGNED",
            "SIGNING_URL_REQUESTED",
            "UPLOADED_BY_SENDER",
            "USER_ACK_AGREEMENT_MODIFIED",
            "READY_TO_VAULT",
            "VAULTED",
            "WEB_IDENTITY_AUTHENTICATED",
            "WEB_IDENTITY_SPECIFIED",
            "WRITTEN_DOWNLOAD",
            "WRITTEN_SIGNED"
          ]
        },
        "participantRole": {
          "description": "Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).",
          "type": "string",
          "required": true,
          "enum": [
            "SIGNER",
            "DELEGATE_TO_SIGNER",
            "APPROVER",
            "DELEGATE_TO_APPROVER",
            "ACCEPTOR",
            "DELEGATE_TO_ACCEPTOR",
            "FORM_FILLER",
            "DELEGATE_TO_FORM_FILLER",
            "CERTIFIED_RECIPIENT",
            "DELEGATE_TO_CERTIFIED_RECIPIENT",
            "SHARE",
            "SENDER"
          ]
        },
        "vaultEventId": {
          "description": "The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)",
          "type": "string",
          "required": true
        },
        "participantId": {
          "description": "The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
          "type": "string",
          "required": true
        },
        "versionId": {
          "description": "An ID which uniquely identifies the version of the document associated with this audit event",
          "type": "string",
          "required": true
        },
        "actingUserEmail": {
          "description": "Email address of the user that created the event",
          "type": "string",
          "required": true
        },
        "devicePhoneNumber": {
          "description": "Phone number from the device used when the participation is completed on a mobile phone",
          "type": "string",
          "required": true
        },
        "initiatingUserEmail": {
          "description": "Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
          "type": "string",
          "required": true
        },
        "digitalSignatureInfo": {
          "description": "This is present for ESIGNED events when the participation is signed digitally",
          "type": "DigitalSignatureInfo",
          "items": {
            "$ref": "DigitalSignatureInfo"
          },
          "required": true
        },
        "vaultProviderName": {
          "description": "Name of the vault provider for the vault event (if vaulted, otherwise null)",
          "type": "string",
          "required": true
        },
        "comment": {
          "description": "The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant",
          "type": "string",
          "required": false
        },
        "id": {
          "description": "The identifier for the event.",
          "type": "string",
          "required": false
        },
        "synchronizationId": {
          "description": "A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)",
          "type": "string",
          "required": true
        },
        "deviceLocation": {
          "description": "Location of the device that generated the event (This value may be null due to limited privileges)",
          "type": "DeviceLocation",
          "items": {
            "$ref": "DeviceLocation"
          },
          "required": true
        }
      }
    },
    "AgreementCcInfo": {
      "id": "CcInfo",
      "properties": {
        "visiblePages": {
          "description": "When you enable limited document visibility (documentVisibilityEnabled), you can specify which file (fileInfo) should be made visible to which specific participant set.<br>Specify one or more label values of a fileInfos element.<br>Each signer participant sets must contain at least one required signature field in at least one visible file included in this API call; if not a page with a signature field is automatically appended for any missing participant sets. If there is a possibility that one or more participant sets do not have a required signature field in the files included in the API call, all signer participant sets should include a special index value of '0' to make this automatically appended signature page visible to the signer. Not doing so may result in an error. For all other roles, you may omit this value to exclude this page.",
          "type": "array",
          "items": {
            "$ref": "string"
          },
          "required": false
        },
        "label": {
          "description": "Label of the CC list as returned in workflow description",
          "type": "string",
          "required": false
        },
        "email": {
          "description": "Email of the CC participant of the agreement",
          "type": "string",
          "required": true
        }
      }
    },
    "ExternalId": {
      "id": "ExternalId",
      "properties": {
        "id": {
          "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried",
          "type": "string",
          "required": false
        }
      }
    },
    "FormFieldPutInfo": {
      "description": "Information required to add or replace agreement form fields",
      "id": "FormFieldPutInfo",
      "properties": {
        "fields": {
          "description": "The list of fields to update or replace. PDF_SIGNATURE inputType field is currently not supported.",
          "type": "array",
          "items": {
            "$ref": "FormField"
          },
          "required": true
        }
      }
    },
    "FormFieldPostInfo": {
      "description": "Information required to add or update agreement form fields",
      "id": "FormFieldPostInfo",
      "properties": {
        "templateId": {
          "description": "The ID of the template from which to add new fields",
          "type": "string",
          "required": true
        }
      }
    },
    "SignerIdentityReportInfo": {
      "id": "SignerIdentityReportInfo",
      "properties": {
        "securityOption": {
          "description": "Optional secondary security parameters for the signer identity report.",
          "type": "SecurityOption",
          "items": {
            "$ref": "SecurityOption"
          },
          "required": false
        }
      }
    },
    "AgreementCancellationInfo": {
      "id": "AgreementCancellationInfo",
      "properties": {
        "comment": {
          "description": "An optional comment describing to the recipients why you want to cancel the transaction",
          "type": "string",
          "required": false
        },
        "notifyOthers": {
          "description": "Whether or not you would like the recipients to be notified that the transaction has been cancelled. The default value is false",
          "type": "boolean",
          "required": false
        }
      }
    },
    "FormFieldLocation": {
      "description": "Location information for form fields",
      "id": "FormFieldLocation",
      "properties": {
        "pageNumber": {
          "description": "Number of the page where form field has to be placed, starting from 1.",
          "type": "integer",
          "required": true
        },
        "top": {
          "format": "double",
          "description": "No. of pixels from bottom of the page for form field placement",
          "type": "number",
          "required": true
        },
        "left": {
          "format": "double",
          "description": "No. of pixels from left of the page for form field placement",
          "type": "number",
          "required": true
        },
        "width": {
          "format": "double",
          "description": "Width of the form field in pixels",
          "type": "number",
          "required": true
        },
        "height": {
          "format": "double",
          "description": "Height of the form field in pixels",
          "type": "number",
          "required": true
        }
      }
    },
    "SigningUrlResponse": {
      "id": "SigningUrlResponse",
      "properties": {
        "signingUrlSetInfos": {
          "description": "An array of urls for signer sets involved in this agreement.",
          "type": "array",
          "items": {
            "$ref": "SigningUrlSetInfo"
          },
          "required": true
        }
      }
    },
    "AgreementDocuments": {
      "id": "AgreementDocuments",
      "properties": {
        "documents": {
          "description": "A list of documents",
          "type": "array",
          "items": {
            "$ref": "Document"
          },
          "required": true
        },
        "supportingDocuments": {
          "description": "A list of supporting documents",
          "type": "array",
          "items": {
            "$ref": "SupportingDocument"
          },
          "required": false
        }
      }
    },
    "SendOptions": {
      "id": "SendOptions",
      "properties": {
        "initEmails": {
          "description": "Control notification mails for Agreement initiation events - ACTION_REQUESTED and CREATED",
          "type": "string",
          "required": false,
          "enum": [
            "ALL",
            "NONE"
          ]
        },
        "inFlightEmails": {
          "description": "Control notification mails for agreement-in-process events - DELEGATED, REPLACED",
          "type": "string",
          "required": false,
          "enum": [
            "ALL",
            "NONE"
          ]
        },
        "completionEmails": {
          "description": "Control notification mails for agreement completion events - COMPLETED, CANCELLED, EXPIRED and REJECTED",
          "type": "string",
          "required": false,
          "enum": [
            "ALL",
            "NONE"
          ]
        }
      }
    },
    "DisplayParticipantSetInfo": {
      "id": "DisplayParticipantSetInfo",
      "properties": {
        "displayUserSetMemberInfos": {
          "description": "Displays the info about user set",
          "type": "array",
          "items": {
            "$ref": "DisplayParticipantInfo"
          },
          "required": true
        },
        "displayUserSetName": {
          "description": "The name of the display user set. Returned only, if the API caller is the sender of agreement. ",
          "type": "string",
          "required": false
        }
      }
    },
    "PageInfo": {
      "id": "PageInfo",
      "properties": {
        "nextCursor": {
          "description": "Used to navigate to the next page. If notÂ returned, there are no further pages.",
          "type": "string",
          "required": true
        }
      }
    },
    "DisplayParticipantInfo": {
      "id": "DisplayParticipantInfo",
      "properties": {
        "fullName": {
          "description": "Displays the full name of the user, if available. ",
          "type": "string",
          "required": false
        },
        "company": {
          "description": "Displays the name of the company of the user, if available",
          "type": "string",
          "required": false
        },
        "email": {
          "description": "Displays the email of the user",
          "type": "string",
          "required": true
        }
      }
    },
    "OfflineDeviceInfo": {
      "id": "OfflineDeviceInfo",
      "properties": {
        "deviceDescription": {
          "description": "Device Description",
          "type": "string",
          "required": true
        },
        "applicationDescription": {
          "description": "Application Description",
          "type": "string",
          "required": true
        },
        "deviceTime": {
          "format": "date",
          "description": "The device local time. The device time provided should not be before 30 days of current date.Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        }
      }
    },
    "CommonViewConfiguration": {
      "id": "CommonViewConfiguration",
      "properties": {
        "autoLoginUser": {
          "description": "Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false",
          "type": "boolean",
          "required": false
        },
        "noChrome": {
          "description": "No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false",
          "type": "boolean",
          "required": false
        },
        "locale": {
          "description": "Message template locale",
          "type": "string",
          "required": false
        }
      }
    },
    "DelegationResponse": {
      "description": "A JSON that contains the id of newly created delegated participant set",
      "id": "DelegationResponse",
      "properties": {
        "id": {
          "description": "The unique identifier of the participant set to which the agreement was forwarded.",
          "type": "string",
          "required": true
        }
      }
    },
    "DocumentImageUrlsInfo": {
      "id": "DocumentImageUrlsInfo",
      "properties": {
        "documentImageUrlsList": {
          "description": "A list of documents image URLs.",
          "type": "array",
          "items": {
            "$ref": "DocumentImageUrls"
          },
          "required": true
        },
        "documentId": {
          "description": "Id of the document",
          "type": "string",
          "required": true
        }
      }
    },
    "SigningUrlSetInfo": {
      "id": "SigningUrlSetInfo",
      "properties": {
        "signingUrls": {
          "description": "An array of urls for current signer set.",
          "type": "array",
          "items": {
            "$ref": "SigningUrl"
          },
          "required": true
        },
        "signingUrlSetName": {
          "description": "The name of the current signer set. Returned only, if the API caller is the sender of agreement",
          "type": "string",
          "required": false
        }
      }
    },
    "DocumentImageUrls": {
      "id": "DocumentImageUrls",
      "properties": {
        "imageURLs": {
          "description": "A list of image url (one per page).",
          "type": "array",
          "items": {
            "$ref": "PageImageUrl"
          },
          "required": true
        },
        "imagesAvailable": {
          "description": "true if images for the associated image size is available, else false.",
          "type": "boolean",
          "required": false
        },
        "imageSize": {
          "description": "ImageSize corresponding to the imageUrl returned ",
          "type": "string",
          "required": false,
          "enum": [
            "FIXED_WIDTH_50px",
            "FIXED_WIDTH_250px",
            "FIXED_WIDTH_675px",
            "ZOOM_50_PERCENT",
            "ZOOM_75_PERCENT",
            "ZOOM_100_PERCENT",
            "ZOOM_125_PERCENT",
            "ZOOM_150_PERCENT",
            "ZOOM_200_PERCENT"
          ]
        }
      }
    },
    "DelegatedParticipantSetInfo": {
      "id": "DelegatedParticipantSetInfo",
      "properties": {
        "privateMessage": {
          "description": "Participant set's private message - all participants in the set will receive the same message. This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": false
        },
        "memberInfos": {
          "description": "Array of ParticipantInfo objects, containing participant-specific data (e.g. email). All participants in the array belong to the same set",
          "type": "array",
          "items": {
            "$ref": "DelegatedParticipantInfo"
          },
          "required": true
        }
      }
    },
    "AgreementStateInfo": {
      "id": "AgreementStateInfo",
      "properties": {
        "agreementCancellationInfo": {
          "description": "Cancellation information for the agreement",
          "type": "AgreementCancellationInfo",
          "items": {
            "$ref": "AgreementCancellationInfo"
          },
          "required": false
        },
        "state": {
          "description": "The state in which the agreement should land",
          "type": "string",
          "required": true,
          "enum": [
            "AUTHORING",
            "CANCELLED",
            "IN_PROCESS"
          ]
        }
      }
    },
    "URLFileInfo": {
      "id": "URLFileInfo",
      "properties": {
        "name": {
          "description": "The original system file name of the document being sent",
          "type": "string",
          "required": true
        },
        "mimeType": {
          "description": "The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed",
          "type": "string",
          "required": true
        },
        "url": {
          "description": "A publicly accessible URL for retrieving the raw file content",
          "type": "string",
          "required": true
        }
      }
    }
  },
  "apiVersion": "6.0.0",
  "swaggerVersion": "1.2",
  "basePath": "https://secure.au1.echosign.com/api/rest/v6",
  "apis": [
    {
      "path": "/agreements",
      "operations": [
        {
          "summary": "Creates an agreement. Sends it out for signatures, and returns the agreementID in the response to the client.",
          "notes": "This is a primary endpoint which is used to create a new agreement. An agreement can be created using transientDocument, libraryDocument or a URL. You can create an agreement in one of the 3 mentioned states: a) <b>DRAFT</b> - to incrementally build the agreement before sending out, b) <b>AUTHORING</b> - to add/edit form fields in the agreement, c) <b>IN_PROCESS</b> - to immediately send the agreement. You can use the PUT /agreements/{agreementId}/state endpoint to transition an agreement between the above mentioned states. An allowed transition would follow the following sequence: DRAFT -> AUTHORING -> IN_PROCESS -> CANCELLED.",
          "nickname": "createAgreement",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "CCINFO_LABEL_MISSING: Required label field value is missing in CcInfo .",
              "code": "400"
            },
            {
              "reason": "DUPLICATE_FILEINFO_LABEL: The same label specified in more than one FileInfo object.",
              "code": "400"
            },
            {
              "reason": "DUPLICATE_PARTICIPATIONSET_LABEL: Duplicate label specified in more than one participant set.",
              "code": "400"
            },
            {
              "reason": "EMPTY_REDIRECT_URL: If PostSignOptions are specified, the redirectUrl must not be empty.",
              "code": "400"
            },
            {
              "reason": "FILEINFO_LABEL_MISSING: Required label field value is missing in FileInfo.",
              "code": "400"
            },
            {
              "reason": "INVALID_AGREEMENT_STATUS: Agreement state can not be updated to the provided status.",
              "code": "400"
            },
            {
              "reason": "INVALID_ARGUMENTS: One or more arguments to the method are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_CCINFO: The value specified in one or more CcInfo object is invalid .",
              "code": "400"
            },
            {
              "reason": "INVALID_CCINFO_LABEL: The label specified in one or more CcInfo object is invalid .",
              "code": "400"
            },
            {
              "reason": "INVALID_CC_VISIBLE_PAGE_LABEL: One or more visible page labels in CC is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_DATE: Date requested is invalid. Please check end date is greater than start date and range is not greater than 180 days.",
              "code": "400"
            },
            {
              "reason": "INVALID_EMAIL: Email provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_FILEINFO_LABEL: The label specified in one or more FileInfo object is invalid .",
              "code": "400"
            },
            {
              "reason": "INVALID_FILE_INFO: Invalid or no file info is provided.",
              "code": "400"
            },
            {
              "reason": "INVALID_FIRST_REMINDER_DELAY: Invalid firstReminderDelay provided. It should be a positive integer greater than or equal to 1 and should not exceed agreement expiration time.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_MIME_TYPE: The mime type specified is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_NUMBER_OF_PAYMENT_FIELDS: Some participants have more than one payment field.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ORDER: Order of participant sets define an invalid range.",
              "code": "400"
            },
            {
              "reason": "INVALID_PARTICIPANT_ROLE: Role provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_PARTICIPANT_SET_VISIBLE_PAGE_LABEL: One or more visible page labels in participant set is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_PARTICIPATIONSET_LABEL: The label specified in one or more participant set is invalid .",
              "code": "400"
            },
            {
              "reason": "INVALID_RECIPIENT_AUTH_METHOD: Invalid authentication method for recipient .",
              "code": "400"
            },
            {
              "reason": "INVALID_REDIRECT_DELAY: The redirectDelay specified in PostSignOptions must be nonnegative integer.",
              "code": "400"
            },
            {
              "reason": "INVALID_REDIRECT_URL: The redirectUrl specified in PostSignOptions is not a valid URL.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MAX_ADDRESSES_EXCEEDED: Some fields maximum allowed entries requirement is exceeded.",
              "code": "400"
            },
            {
              "reason": "MIN_ADDRESSES_NOT_MET: Some fields minimum entries requirement is not met.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "MUST_PROVIDE_REMINDER_FREQUENCY: Provide reminder frequency or set the default reminder frequency for the account.",
              "code": "400"
            },
            {
              "reason": "PARTICIPATIONSET_LABEL_MISSING: Required label field value is missing in participant set.",
              "code": "400"
            },
            {
              "reason": "PAST_EXPIRY_TIME: Expiry time is set before the use time.",
              "code": "400"
            },
            {
              "reason": "URL_INVALID: Provided document URL is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NOT_AUTHORIZED_FOR_TRANSIENT_RESOURCE: Not authorized for the transient resource referred in the request.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "CONSENT_ACCEPTANCE_REQUIRED: Consent acceptance is required for creation of user.",
              "code": "403"
            },
            {
              "reason": "DOCUMENT_VISIBILITY_DISABLED: Document visibility is disabled for this agreement.",
              "code": "403"
            },
            {
              "reason": "GOV_ID_LIMIT_EXCEEDED: Government ID for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "HYBRID_ROUTING_NOT_ALLOWED: Hybrid routing is not enabled for this user.",
              "code": "403"
            },
            {
              "reason": "KBA_LIMIT_EXCEEDED: KBA limit for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "PAYMENT_INTEGRATION_DISABLED: Request has payment fields, but payment feature is disabled.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "PHONE_AUTH_LIMIT_EXCEEDED: Phone usage limit for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "PRIVATE_MESSAGES_NOT_ENABLED: Sending private messages to recipients is not enabled for this user.",
              "code": "403"
            },
            {
              "reason": "PROBLEM_WITH_WORKFLOW_DESCRIPTION: There is a problem in workflow description.Change the workflow description or contact your account admin.",
              "code": "403"
            },
            {
              "reason": "SEND_LIMIT_EXCEEDED: Agreement creation quota of the user is exhausted.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_TRANSIENTDOCUMENT_ID: The Transient Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_WORKFLOW_ID: The Workflow ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_REMOVED: The library document has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "TRANSIENT_RESOURCE_DELETED: Transient Resource deleted from the server.",
              "code": "404"
            },
            {
              "reason": "INVALID_GROUP_ID_FOR_USER: Specified group is invalid or user is not a member.",
              "code": "405"
            },
            {
              "reason": "UNSUPPORTED_MEDIA_TYPE: Content type was not provided or is not supported.",
              "code": "415"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "POST",
          "type": "AgreementCreationResponse",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "body",
              "name": "AgreementInfo",
              "description": "Information about the agreement that you want to create.",
              "type": "AgreementCreationInfo",
              "required": true
            }
          ],
          "order": 6
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/formFields",
      "operations": [
        {
          "summary": "Adds template fields to an agreement",
          "notes": null,
          "nickname": "addTemplateFieldsToAgreement",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "TEMPLATE_NOT_FORM_FIELD_LAYER: The specified template does not represent a form field layer.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_CANCELLED: The agreement is already cancelled.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_NOT_EXPOSED: The agreement has not yet been exposed to the requested participant.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_NOT_SIGNABLE: The agreement is not currently waiting for anyone to sign it.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_REMOVED: The agreement has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_SIGNED: The agreement is already signed.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT: The participant email specified is invalid.",
              "code": "404"
            },
            {
              "reason": "RESOURCE_MODIFIED: Resource is already modified with newer version.",
              "code": "412"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "POST",
          "type": "AgreementFormFields",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "FormFieldPostInfo",
              "description": "List of form fields to add or replace",
              "type": "FormFieldPostInfo",
              "required": true
            }
          ],
          "order": 7
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/members/participantSets/{participantSetId}/delegatedParticipantSets",
      "operations": [
        {
          "summary": "Creates a participantSet to which the agreement is forwarded for takingÂ appropriate action.",
          "notes": "Participants marked as delegator can call this API endpoint.",
          "nickname": "createDelegatedParticipantSets",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_EMAIL: Email provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "MULTIPLE_DELEGATIONS_NOT_SUPPORTED: Multiple delegations are not supported currently.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "OPERATION_NOT_ALLOWED: Requested Operation is not allowed.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_SET_ID: The participant set ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_ALREADY_CANCELLED: The agreement being modified has already been cancelled.",
              "code": "409"
            },
            {
              "reason": "AGREEMENT_ALREADY_SIGNED: The agreement being modified has already been signed.",
              "code": "409"
            },
            {
              "reason": "AGREEMENT_MODIFICATION_NOT_ACKNOWLEDGED: The agreement has been modified by the sender. Please get the latest version.",
              "code": "409"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "POST",
          "type": "DelegationResponse",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantSetId",
              "description": "The participant set identifier",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "DelegatedParticipantSetInfo",
              "description": "Information about the delegate participant Set",
              "type": "DelegatedParticipantSetInfo",
              "required": true
            }
          ],
          "order": 8
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/members/share",
      "operations": [
        {
          "summary": "Share an agreement with someone.",
          "notes": null,
          "nickname": "createShareOnAgreement",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "AGREEMENT_SHARING_ALREADY_SHARED: %s has already shared this agreement with %s.",
              "code": "400"
            },
            {
              "reason": "AGREEMENT_SHARING_MAX_SHAREES_EXCEEDED: Agreements can be shared with at most %s sharees at a time.",
              "code": "400"
            },
            {
              "reason": "AGREEMENT_SHARING_MAX_SHAREE_EXCEEDED: Agreements can be shared with at most 1 sharee at a time.",
              "code": "400"
            },
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_EMAIL: Email provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "SHAREE_ALREADY_PARTICIPATING: One or more sharees is already a participant and cannot be shared with.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "NO_ACCESS_TOKEN_HEADER: Access token header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_SHARING_DISABLED: Agreement sharing is not enabled for your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_NOT_AVAILABLE: The agreement is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "POST",
          "type": "ShareCreationResponseList",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "ShareCreationInfoList",
              "description": "List of agreement share creation information objects.",
              "type": "ShareCreationInfoList",
              "required": true
            }
          ],
          "order": 14
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/reminders",
      "operations": [
        {
          "summary": "Creates a reminder on the specified participants of an agreement identified by agreementId in the path.",
          "notes": null,
          "nickname": "createReminderOnParticipant",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_DATE_FORMAT: The date format provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_FIRST_REMINDER_DELAY: Invalid firstReminderDelay provided. It should be a positive integer greater than or equal to 1 and should not exceed agreement expiration time.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_REMINDER_RECIPIENT_PIDS: One or more of the participant ID(s) of the reminder recipients provided in the request are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_REMINDER_STATUS: Status of the reminder provided in the request is invalid. Reminder cannot be created in the CANCELED or updated to the ACTIVE state.",
              "code": "400"
            },
            {
              "reason": "INVALID_START_REMINDER_FROM_WHEN_AGREEMENT_IN_AUTHORING: Reminders cannot be created when startReminderCounterFrom = REMINDER_CREATION and the agreement is waiting for authoring.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "CANNOT_CREATE_REMINDER_INVALID_STATE: Reminder cannot be created because either the agreement or the participant is in a completed state.",
              "code": "403"
            },
            {
              "reason": "CANNOT_CREATE_REMINDER_INVALID_TIMING: Reminder cannot be created because the combination of nextSendDate and frequency, firstReminderDelay, or startReminderCounterFrom is invalid.",
              "code": "403"
            },
            {
              "reason": "CANNOT_CREATE_REMINDER_PAST_EXPIRATION: Reminder cannot be created past the agreement expiration date.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_ARCHIVED: The agreement is archived.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_EXPIRED: The agreement is expired.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_ALREADY_CANCELLED: The agreement being modified has already been cancelled.",
              "code": "409"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "POST",
          "type": "ReminderCreationResult",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "ReminderInfo",
              "description": "The information about a reminder associated with a recipient of an agreement.",
              "type": "ReminderInfo",
              "required": true
            }
          ],
          "order": 15
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/views",
      "operations": [
        {
          "summary": "Retrieves the latest state view url of agreement.",
          "notes": null,
          "nickname": "createAgreementView",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read",
                "description": "agreement read is always required"
              },
              {
                "scope": "user_login",
                "description": "Required additionally if the autoLoginUser parameter is set to true"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "VIEW_NOT_AVAILABLE: Requested view is not available for the resource in the current state.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "POST",
          "type": "AgreementViews",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a> - agreement read is always required</li><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('user_login')\" oncontextmenu=\"this.href=oauthDoc('user_login')\" target=\"oauthDoc\">user_login</a> - Required additionally if the autoLoginUser parameter is set to true</li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "AgreementViewInfo",
              "description": "Name of the required view and its desired configuration.",
              "type": "AgreementViewInfo",
              "required": true
            }
          ],
          "order": 16
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/signerIdentityReport",
      "operations": [
        {
          "summary": "Retrieves the signer identity report of an agreement identified by agreementId.",
          "notes": "PDF file stream containing signer identify information",
          "format": "byte",
          "nickname": "createSignerIdentityReport",
          "produces": [
            "application/pdf",
            "application/pdf;encoding=base64"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "WEAK_PASSWORD: Password does not meet minimum strength level.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            },
            {
              "reason": "SIGNER_IDENTITY_REPORT_NOT_AVAILABLE: Signer Identity Report is available only for originator, when agreement is completed and feature is enabled.",
              "code": "500"
            }
          ],
          "httpMethod": "POST",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "SignerIdentityReportInfo",
              "description": "Information about the agreement for which you want to create signer identity report.",
              "type": "SignerIdentityReportInfo",
              "required": false
            }
          ],
          "order": 17
        }
      ]
    },
    {
      "path": "/agreements",
      "operations": [
        {
          "summary": "Retrieves agreements for the user.",
          "notes": null,
          "nickname": "getAgreements",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_CURSOR: Page cursor provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_PAGE_SIZE: Page size is either invalid or not within permissible range.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_GROUP_ID_FOR_USER: Specified group is invalid or user is not a member.",
              "code": "405"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "UserAgreements",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "externalId",
              "description": "Case-sensitive ExternalID for which you would like to retrieve agreement information. ExternalId is passed in the call to the agreement creation API.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "groupId",
              "description": "The group identifier, as returned by the group creation API or retrieved from the API to fetch groups.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "showHiddenAgreements",
              "description": "A query parameter to fetch all the hidden agreements along with the visible agreements. Default value is false.",
              "type": "boolean",
              "required": false
            },
            {
              "paramType": "query",
              "name": "cursor",
              "description": "Used to navigate through the pages. If not provided, returns the first page.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "pageSize",
              "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
              "type": "integer",
              "required": false
            }
          ],
          "order": 18
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}",
      "operations": [
        {
          "summary": "Retrieves the current status of an agreement.",
          "notes": null,
          "nickname": "getAgreementInfo",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "FetchedAgreementInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            }
          ],
          "order": 19
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/auditTrail",
      "operations": [
        {
          "summary": "Retrieves the audit trail of an agreement identified by agreementId.",
          "notes": "PDF file stream containing audit trail information",
          "format": "byte",
          "nickname": "getAuditTrail",
          "produces": [
            "application/pdf",
            "application/pdf;encoding=base64"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            }
          ],
          "order": 21
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/combinedDocument",
      "operations": [
        {
          "summary": "Retrieves a single combined PDF document for the documents associated with an agreement.",
          "notes": null,
          "format": "byte",
          "nickname": "getCombinedDocument",
          "produces": [
            "application/pdf",
            "application/pdf;encoding=base64"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_ID: The participant ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_VERSION_ID: The Version ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "versionId",
              "description": "The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "participantId",
              "description": "The participant identifier to be used to retrieve documents. If not mentioned, the participation of api caller is used.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "attachSupportingDocuments",
              "description": "When set to true, attach corresponding supporting documents to the signed agreement PDF. Default value of this parameter is true.",
              "type": "boolean",
              "required": false
            },
            {
              "paramType": "query",
              "name": "attachAuditReport",
              "description": "When set to true, attach an audit report to the signed agreement PDF. The default value is false.",
              "type": "boolean",
              "required": false
            }
          ],
          "order": 23
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/combinedDocument/pagesInfo",
      "operations": [
        {
          "summary": "Retrieves info of all pages of a combined PDF document for the documents associated with an agreement.",
          "notes": null,
          "nickname": "getCombinedDocumentPagesInfo",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "DOCUMENTS_REMOVED: The documents have already been removed.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "CombinedDocumentPagesInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "includeSupportingDocumentsPagesInfo",
              "description": "When set to true, returns info of all pages of supporting documents as well. Else, return the info of pages of only the original document.",
              "type": "boolean",
              "required": false
            }
          ],
          "order": 24
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/combinedDocument/url",
      "operations": [
        {
          "summary": "Retrieves url of all visible pages of all the documents associated with an agreement.",
          "notes": null,
          "nickname": "getCombinedDocumentUrl",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_NOT_AVAILABLE: The agreement is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "DOCUMENTS_REMOVED: The documents have already been removed.",
              "code": "404"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_ID: The participant ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_VERSION_ID: The Version ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "DocumentUrl",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "versionId",
              "description": "The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "participantId",
              "description": "The participant identifier to be used to retrieve documents. If not mentioned, the participation of api caller is used.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "attachSupportingDocuments",
              "description": "When set to true, attach corresponding supporting documents to the signed agreement PDF. Default value of this parameter is true.",
              "type": "boolean",
              "required": false
            },
            {
              "paramType": "query",
              "name": "attachAuditReport",
              "description": "When set to true, attach an audit report to the signed agreement PDF. The default value is false.",
              "type": "boolean",
              "required": false
            }
          ],
          "order": 25
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/documents",
      "operations": [
        {
          "summary": "Retrieves the IDs of the documents of an agreement identified by agreementId.",
          "notes": null,
          "nickname": "getAllDocuments",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "DOCUMENTS_REMOVED: The documents have already been removed.",
              "code": "404"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_ID: The participant ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_VERSION_ID: The Version ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "AgreementDocuments",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "versionId",
              "description": "The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "participantId",
              "description": "The participant identifier to be used to retrieve documents. If not mentioned, the participation of api caller is used.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "supportingDocumentContentFormat",
              "description": "Content format of the supported documents. It can have two possible values ORIGINAL or CONVERTED_PDF. Default value is CONVERTED_PDF.",
              "type": "string",
              "required": false,
              "enum": [
                "ORIGINAL",
                "CONVERTED_PDF"
              ]
            }
          ],
          "order": 27
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/documents/{documentId}",
      "operations": [
        {
          "summary": "Retrieves the file stream of a document of an agreement.",
          "notes": null,
          "format": "byte",
          "nickname": "getDocument",
          "produces": [
            "*/*",
            "*/*;encoding=base64"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "DOCUMENTS_REMOVED: The documents have already been removed.",
              "code": "404"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_DOCUMENT_ID: The Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "documentId",
              "description": "The document identifier, as retrieved from the API which fetches the documents of a specified agreement",
              "type": "string",
              "required": true
            }
          ],
          "order": 30
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/documents/{documentId}/imageUrls",
      "operations": [
        {
          "summary": "Retrieves image urls of all visible pages of a document associated with an agreement.",
          "notes": null,
          "nickname": "getDocumentImageUrls",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ARGUMENTS: One or more arguments to the method are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_IMAGE_SIZE: Must provide a comma separated list of valid image sizes.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "DOCUMENTS_REMOVED: The documents have already been removed.",
              "code": "404"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_DOCUMENT_ID: The Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "AgreementDocumentImageUrlsInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "documentId",
              "description": "The document identifier, as retrieved from the API which fetches the documents of a specified agreement",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "imageSizes",
              "description": "A comma separated list of image sizes i.e. {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}. Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT}. ",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "showImageAvailabilityOnly",
              "description": "When set to true, returns only image availability. Else, returns both image urls and its availability.",
              "type": "boolean",
              "required": false
            },
            {
              "paramType": "query",
              "name": "startPage",
              "description": "Start of page number range for which imageUrls are requested. Starting page number should be greater than 0.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "endPage",
              "description": "End of page number range for which imageUrls are requested.",
              "type": "integer",
              "required": false
            }
          ],
          "order": 31
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/documents/imageUrls",
      "operations": [
        {
          "summary": "Retrieves image urls of all visible pages of all the documents associated with an agreement.",
          "notes": null,
          "nickname": "getAllDocumentsImageUrls",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "DOCUMENTS_REMOVED: The documents have already been removed.",
              "code": "404"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_ID: The participant ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_VERSION_ID: The Version ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "DocumentsImageUrlsInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "versionId",
              "description": "The version identifier of agreement as provided by the API which retrieves information of a specific agreement. If not provided then latest version will be used.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "participantId",
              "description": "The participant identifier to be used to retrieve documents. If not mentioned, the participation of api caller is used.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "imageSizes",
              "description": "A comma separated list of image sizes i.e. {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}. Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT}. ",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "includeSupportingDocumentsImageUrls",
              "description": "When set to true, returns image urls of supporting documents as well. Else, returns image urls of only the original documents.",
              "type": "boolean",
              "required": false
            },
            {
              "paramType": "query",
              "name": "showImageAvailabilityOnly",
              "description": "When set to true, returns only image availability. Else, returns both image urls and its availability.",
              "type": "boolean",
              "required": false
            }
          ],
          "order": 32
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/events",
      "operations": [
        {
          "summary": "Retrieves the events information for an agreement.",
          "notes": null,
          "nickname": "getEvents",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "AgreementEventList",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            }
          ],
          "order": 36
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/formData",
      "operations": [
        {
          "summary": "Retrieves data entered into the interactive form fields of the agreement.",
          "notes": "This API can only be called by the creator of the agreement",
          "format": "byte",
          "nickname": "getFormData",
          "produces": [
            "text/csv"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_EXPIRED: The agreement is expired.",
              "code": "404"
            },
            {
              "reason": "DOCUMENT_HAS_BEEN_DELETED: The document has already been removed.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "NO_FORM_DATA: There is no form data available.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            }
          ],
          "order": 38
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/formFields",
      "operations": [
        {
          "summary": "Retrieves details of form fields of an agreement.",
          "notes": null,
          "nickname": "getFormFields",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_CANCELLED: The agreement is already cancelled.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_NOT_EXPOSED: The agreement has not yet been exposed to the requested participant.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_NOT_SIGNABLE: The agreement is not currently waiting for anyone to sign it.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_REMOVED: The agreement has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_SIGNED: The agreement is already signed.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT: The participant email specified is invalid.",
              "code": "404"
            }
          ],
          "httpMethod": "GET",
          "type": "AgreementFormFields",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "participantEmail",
              "description": "The email address of the participant to be used to retrieve its associated form fields.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            }
          ],
          "order": 39
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/formFields/mergeInfo",
      "operations": [
        {
          "summary": "Retrieves the merge info stored with an agreement.",
          "notes": null,
          "nickname": "getMergeInfo",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_NOT_IN_AUTHORING_STATE: The agreement is not in authoring state. Hence, form fields cannot be updated.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_REMOVED: The agreement has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            }
          ],
          "httpMethod": "GET",
          "type": "FormFieldMergeInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            }
          ],
          "order": 40
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/me/note",
      "operations": [
        {
          "summary": "Retrieves the latest note associated with an agreement.",
          "notes": null,
          "nickname": "getAgreementNoteForApiUser",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "Note",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            }
          ],
          "order": 41
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/members",
      "operations": [
        {
          "summary": "Retrieves information of members of the agreement.",
          "notes": null,
          "nickname": "getAllMembers",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "OPERATION_NOT_ALLOWED: Requested Operation is not allowed.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "MembersInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "includeNextParticipantSet",
              "description": "A query parameter to fetch next active participation members. Default value is false.",
              "type": "boolean",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            }
          ],
          "order": 42
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/members/participantSets/{participantSetId}",
      "operations": [
        {
          "summary": "Retrieves the participant set of an agreement identified by agreementId in the path.",
          "notes": null,
          "nickname": "getParticipantSet",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "OPERATION_NOT_ALLOWED: Requested Operation is not allowed.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_ARCHIVED: The agreement is archived.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_SET_ID: The participant set ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "DetailedParticipantSetInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantSetId",
              "description": "The participant set identifier",
              "type": "string",
              "required": true
            }
          ],
          "order": 43
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/members/participantSets/{participantSetId}/participants/{participantId}/securityOptions",
      "operations": [
        {
          "summary": "Retrieves the security options for a particular participant.",
          "notes": null,
          "nickname": "getAgreementSecurityOptionsForParticipation",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "NO_ACCESS_TOKEN_HEADER: Access token header not provided.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_ARCHIVED: The agreement is archived.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_ID: The participant ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_SET_ID: The participant set ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "ParticipantSecurityOption",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantSetId",
              "description": "The participant set identifier",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantId",
              "description": "The participant identifier",
              "type": "string",
              "required": true
            }
          ],
          "order": 47
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/reminders",
      "operations": [
        {
          "summary": "Retrieves the reminders of an agreement, identified by agreementId in the path.",
          "notes": null,
          "nickname": "getAgreementReminders",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "NO_ACCESS_TOKEN_HEADER: Access token header not provided.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_ARCHIVED: The agreement is archived.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_EXPIRED: The agreement is expired.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_ALREADY_CANCELLED: The agreement being modified has already been cancelled.",
              "code": "409"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "RemindersResponse",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "status",
              "description": "A comma-separated list of reminder statuses of the reminders which should be returned in the response. Currently supported values are ACTIVE, CANCELED, COMPLETE",
              "type": "string",
              "required": false
            }
          ],
          "order": 49
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/reminders/{reminderId}",
      "operations": [
        {
          "summary": "Retrieves a specific reminder associated with an agreement",
          "notes": null,
          "nickname": "getAgreementReminder",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_ARCHIVED: The agreement is archived.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_EXPIRED: The agreement is expired.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_REMINDER_ID: The reminder ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_ALREADY_CANCELLED: The agreement being modified has already been cancelled.",
              "code": "409"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "ReminderInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "reminderId",
              "description": "The reminder identifier",
              "type": "string",
              "required": true
            }
          ],
          "order": 50
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/signingUrls",
      "operations": [
        {
          "summary": "Retrieves the URL for the e-sign page for the current signer(s) of an agreement.",
          "notes": null,
          "nickname": "getSigningUrl",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_EXPIRY: Invalid expiry is provided (must be between 30 and 315360000 seconds).",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "NO_PERMISSION_TO_SIGN: No permission to sign.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_EXPIRED: The agreement is expired.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_NOT_SIGNABLE: The agreement is not currently waiting for anyone to sign it.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_NOT_VISIBLE: The agreement is not visible to this user for signing.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_ALREADY_SIGNED: The agreement being modified has already been signed.",
              "code": "409"
            }
          ],
          "httpMethod": "GET",
          "type": "SigningUrlResponse",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "expiry",
              "description": "Lifetime of the esignUrl, between 30 and 315360000 seconds. If not provided, it is decided by the application settings.",
              "type": "integer",
              "required": false
            }
          ],
          "order": 52
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/me",
      "operations": [
        {
          "summary": "Retrieves the agreement information related to the api caller",
          "notes": null,
          "nickname": "getAgreementInfoForUser",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "MyAgreementInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            }
          ],
          "order": 54
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}",
      "operations": [
        {
          "summary": "Updates the agreement in draft state, or update the expirationTime on an existing agreement that is already out for signature.",
          "notes": null,
          "nickname": "updateAgreement",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "AGREEMENT_EXPIRATION_DATE_INVALID: You must set a future date for agreement expiration.",
              "code": "400"
            },
            {
              "reason": "AGREEMENT_EXPIRATION_MAX_DAYS_EXCEEDED: There is a maximum of %s days before document expiration.",
              "code": "400"
            },
            {
              "reason": "CCINFO_LABEL_MISSING: Required label field value is missing in CcInfo .",
              "code": "400"
            },
            {
              "reason": "DUPLICATE_FILEINFO_LABEL: The same label specified in more than one FileInfo object.",
              "code": "400"
            },
            {
              "reason": "DUPLICATE_PARTICIPATIONSET_LABEL: Duplicate label specified in more than one participant set.",
              "code": "400"
            },
            {
              "reason": "FILEINFO_LABEL_MISSING: Required label field value is missing in FileInfo.",
              "code": "400"
            },
            {
              "reason": "INVALID_ARGUMENTS: One or more arguments to the method are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_CCINFO: The value specified in one or more CcInfo object is invalid .",
              "code": "400"
            },
            {
              "reason": "INVALID_CCINFO_LABEL: The label specified in one or more CcInfo object is invalid .",
              "code": "400"
            },
            {
              "reason": "INVALID_FILEINFO_LABEL: The label specified in one or more FileInfo object is invalid .",
              "code": "400"
            },
            {
              "reason": "INVALID_FILE_INFO: Invalid or no file info is provided.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_PARTICIPANT_ROLE: Role provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_PARTICIPATIONSET_LABEL: The label specified in one or more participant set is invalid .",
              "code": "400"
            },
            {
              "reason": "INVALID_RECIPIENT_AUTH_METHOD: Invalid authentication method for recipient .",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MAX_ADDRESSES_EXCEEDED: Some fields maximum allowed entries requirement is exceeded.",
              "code": "400"
            },
            {
              "reason": "MIN_ADDRESSES_NOT_MET: Some fields minimum entries requirement is not met.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "MODIFYING_IMMUTABLE_FIELDS: Immutable fields cannot be modified .",
              "code": "400"
            },
            {
              "reason": "PARTICIPATIONSET_LABEL_MISSING: Required label field value is missing in participant set.",
              "code": "400"
            },
            {
              "reason": "UPDATE_NOT_ALLOWED: The agreement you are trying to update is not modifiable.",
              "code": "400"
            },
            {
              "reason": "URL_INVALID: Provided document URL is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NOT_AUTHORIZED_FOR_TRANSIENT_RESOURCE: Not authorized for the transient resource referred in the request.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "UNVERIFIED_USER: The user has registered but has not verified their email address. The user must use the Adobe Sign web site to complete verification.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "CANNOT_EDIT_AGREEMENT_EXPIRATION: You do not have permission to set the expiration date for this agreement.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_ARCHIVED: The agreement is archived.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_EXPIRED: The agreement is expired.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_DOCUMENT_ID: The Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_TRANSIENTDOCUMENT_ID: The Transient Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_WORKFLOW_ID: The Workflow ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_REMOVED: The library document has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "TRANSIENT_RESOURCE_DELETED: Transient Resource deleted from the server.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_ALREADY_CANCELLED: The agreement being modified has already been cancelled.",
              "code": "409"
            },
            {
              "reason": "AGREEMENT_ALREADY_DELEGATED: The agreement being modified has already been delegated to a signer.",
              "code": "409"
            },
            {
              "reason": "AGREEMENT_ALREADY_SIGNED: The agreement being modified has already been signed.",
              "code": "409"
            },
            {
              "reason": "AGREEMENT_NOT_MODIFIED: The agreement has not been modified.",
              "code": "412"
            },
            {
              "reason": "RESOURCE_MODIFIED: Resource is already modified with newer version.",
              "code": "412"
            },
            {
              "reason": "UNSUPPORTED_MEDIA_TYPE: Content type was not provided or is not supported.",
              "code": "415"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "AgreementInfo",
              "description": "Information necessary to update a modifiable agreement that is presently out for signature.",
              "type": "AgreementInfo",
              "required": true
            }
          ],
          "order": 56
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/formFields",
      "operations": [
        {
          "summary": "Updates form fields of an agreement.  This will replace all fields in AUTHORING mode agreements, and will replace all fields except for text tag generated fields in DRAFT mode agreements.",
          "notes": null,
          "nickname": "updateFormFields",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_NOT_IN_AUTHORING_STATE: The agreement is not in authoring state. Hence, form fields cannot be updated.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_NOT_AVAILABLE: The agreement is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_REMOVED: The agreement has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "RESOURCE_MODIFIED: Resource is already modified with newer version.",
              "code": "412"
            }
          ],
          "httpMethod": "PUT",
          "type": "AgreementFormFields",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "FormFieldPutInfo",
              "description": "List of form fields to set for agreement",
              "type": "FormFieldPutInfo",
              "required": true
            }
          ],
          "order": 59
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/formFields/mergeInfo",
      "operations": [
        {
          "summary": "Set the merge info for an agreement.",
          "notes": null,
          "nickname": "updateAgreementMergeInfo",
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_NOT_IN_AUTHORING_STATE: The agreement is not in authoring state. Hence, form fields cannot be updated.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_REMOVED: The agreement has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "RESOURCE_MODIFIED: Resource is already modified with newer version.",
              "code": "412"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "FormFieldMergeInfo",
              "description": "A mapping indicating the default values to set for form fields",
              "type": "FormFieldMergeInfo",
              "required": true
            }
          ],
          "order": 60
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/me/visibility",
      "operations": [
        {
          "summary": "Updates the visibility of an agreement.",
          "notes": null,
          "nickname": "updateAgreementVisibility",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "UPDATE_NOT_ALLOWED: The agreement you are trying to update is not modifiable.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "VisibilityInfo",
              "description": "Information to update visibility of agreement",
              "type": "VisibilityInfo",
              "required": true
            }
          ],
          "order": 61
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/vaulted",
      "operations": [
        {
          "summary": "Complete the vaulting process and update the agreement as vaulted.",
          "notes": null,
          "nickname": "updateAgreementVaulted",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_vault"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_VAULT_ID: The vault ID specified is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "UPDATE_NOT_ALLOWED: The agreement you are trying to update is not modifiable.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_REMOVED: The agreement has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_NOT_READY_TO_VAULT: The agreement is not ready to vault.",
              "code": "409"
            },
            {
              "reason": "AGREEMENT_VAULTED_ALREADY: The agreement is vaulted already.",
              "code": "409"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_vault')\" oncontextmenu=\"this.href=oauthDoc('agreement_vault')\" target=\"oauthDoc\">agreement_vault</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "VaultEventInfo",
              "description": "Information to vault an agreement",
              "type": "VaultEventInfo",
              "required": true
            }
          ],
          "order": 62
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/members/participantSets/{participantSetId}",
      "operations": [
        {
          "summary": "Updates the participant set of an agreement identified by agreementId in the path.",
          "notes": null,
          "nickname": "updateParticipantSet",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "DELEGATION_NOT_ALLOWED: User cannot perform delegation to the specified email address.",
              "code": "400"
            },
            {
              "reason": "DELEGATION_SETTINGS_PROHIBIT: Your account admin does not allow delegation to this individual.",
              "code": "400"
            },
            {
              "reason": "DELEGATION_TO_ORIGINATOR_NOT_ALLOWED: You can't delegate your signature to the sender.",
              "code": "400"
            },
            {
              "reason": "DELEGATION_TO_PREVIOUSLY_REPLACED_NOT_ALLOWED: You can't add an individual who was previously replaced.",
              "code": "400"
            },
            {
              "reason": "DELEGATION_TO_SELF_NOT_ALLOWED: You can't delegate a signature to yourself.",
              "code": "400"
            },
            {
              "reason": "DELEGATION_TO_SIGNATORY_NOT_ALLOWED: You can't delegate your signature to an individual who is already a party to this agreement.",
              "code": "400"
            },
            {
              "reason": "INVALID_COUNTRY_CODE: Country code provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_EMAIL: Email provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_PASSWORD: Password provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_PHONE: Phone number provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "DELEGATOR_CANNOT_UPDATE: Delegator is not allowed to update partcipant set.",
              "code": "403"
            },
            {
              "reason": "ONLY_SENDER_CAN_REPLACE: Only a sender can replace an existing participant.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_CANCELLED: The agreement is already cancelled.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_EXPIRED: The agreement is expired.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_SET_ID: The participant set ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_ALREADY_SIGNED: The agreement being modified has already been signed.",
              "code": "409"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantSetId",
              "description": "The participant set identifier",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "DetailedParticipantSetInfo",
              "description": "The new participant set info.",
              "type": "DetailedParticipantSetInfo",
              "required": true
            }
          ],
          "order": 63
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/members/participantSets/{participantSetId}/participants/{participantId}/reject",
      "operations": [
        {
          "summary": "Rejects the agreement for a participant.",
          "notes": null,
          "nickname": "rejectAgreementForParticipation",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_ARCHIVED: The agreement is archived.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_EXPIRED: The agreement is expired.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_NOT_VISIBLE: The agreement is not visible to this user for signing.",
              "code": "404"
            },
            {
              "reason": "DOCUMENTS_REMOVED: The documents have already been removed.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_ID: The participant ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_SET_ID: The participant set ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_ALREADY_CANCELLED: The agreement being modified has already been cancelled.",
              "code": "409"
            },
            {
              "reason": "AGREEMENT_ALREADY_SIGNED: The agreement being modified has already been signed.",
              "code": "409"
            },
            {
              "reason": "RESOURCE_MODIFIED: Resource is already modified with newer version.",
              "code": "412"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantSetId",
              "description": "The participant set identifier",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantId",
              "description": "The participant identifier",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "AgreementRejectionInfo",
              "description": "Participant rejection information required for rejecting the agreement",
              "type": "AgreementRejectionInfo",
              "required": true
            }
          ],
          "order": 69
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/members/participantSets/{participantSetId}/participants/{participantId}/securityOptions",
      "operations": [
        {
          "summary": "Updates the security options for a particular participant.",
          "notes": null,
          "nickname": "updateAgreementSecurityOptionsForParticipation",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_COUNTRY_CODE: Country code provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_PASSWORD: Password provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_PHONE: Phone number provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_ACCESS_TOKEN_HEADER: Access token header not provided.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "AGREEMENT_IN_DRAFT_STATE: The agreement is in draft state.",
              "code": "403"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "GOV_ID_LIMIT_EXCEEDED: Government ID for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "INVALID_SIGNER_AUTH: Signer identity verification method specified is not allowed by account settings.",
              "code": "403"
            },
            {
              "reason": "KBA_LIMIT_EXCEEDED: KBA limit for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "PHONE_AUTH_LIMIT_EXCEEDED: Phone usage limit for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_ARCHIVED: The agreement is archived.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_EXPIRED: The agreement is expired.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_NOT_VISIBLE: The agreement is not visible to this user for signing.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_ID: The participant ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_SET_ID: The participant set ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_ALREADY_CANCELLED: The agreement being modified has already been cancelled.",
              "code": "409"
            },
            {
              "reason": "AGREEMENT_ALREADY_SIGNED: The agreement being modified has already been signed.",
              "code": "409"
            },
            {
              "reason": "RESOURCE_MODIFIED: Resource is already modified with newer version.",
              "code": "412"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantSetId",
              "description": "The participant set identifier",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantId",
              "description": "The participant identifier",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "ParticipantSecurityOption",
              "description": "Security options that apply to the participant",
              "type": "ParticipantSecurityOption",
              "required": true
            }
          ],
          "order": 73
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/reminders/{reminderId}",
      "operations": [
        {
          "summary": "Updates an existing reminder for an agreement",
          "notes": "You can only update an ACTIVE reminder, and can only update the status to 'CANCELED', update reminderParticipantIds, or update note.",
          "nickname": "updateAgreementReminder",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_REMINDER_RECIPIENT_PIDS: One or more of the participant ID(s) of the reminder recipients provided in the request are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_REMINDER_STATUS: Status of the reminder provided in the request is invalid. Reminder cannot be created in the CANCELED or updated to the ACTIVE state.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "NO_ACCESS_TOKEN_HEADER: Access token header not provided.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "CANNOT_UPDATE_CANCELED_OR_COMPLETE_REMINDER: Canceled or complete reminders cannot be updated.",
              "code": "403"
            },
            {
              "reason": "CANNOT_UPDATE_REMINDER_TIMING: Reminder timing cannot be updated once started.",
              "code": "403"
            },
            {
              "reason": "CANNOT_UPDATE_REMINDER_WHEN_CANCELING: Only status can be updated when canceling a reminder.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "AGREEMENT_ARCHIVED: The agreement is archived.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_DELETED: The agreement has been deleted.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_EXPIRED: The agreement is expired.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_REMINDER_ID: The reminder ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "AGREEMENT_ALREADY_CANCELLED: The agreement being modified has already been cancelled.",
              "code": "409"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "reminderId",
              "description": "The reminder identifier",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "ReminderInfo",
              "description": "The information about a reminder associated with a recipient of an agreement.",
              "type": "ReminderInfo",
              "required": true
            }
          ],
          "order": 74
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/state",
      "operations": [
        {
          "summary": "Updates the state of an agreement identified by agreementId in the path.",
          "notes": "This endpoint can be used by originator/sender of an agreement to transition between the states of agreement. An allowed transition would follow the following sequence: DRAFT -> AUTHORING -> IN_PROCESS -> CANCELLED.",
          "nickname": "updateAgreementState",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ARGUMENTS: One or more arguments to the method are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "GOV_ID_LIMIT_EXCEEDED: Government ID for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "KBA_LIMIT_EXCEEDED: KBA limit for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "OPERATION_NOT_ALLOWED: Requested Operation is not allowed.",
              "code": "403"
            },
            {
              "reason": "PHONE_AUTH_LIMIT_EXCEEDED: Phone usage limit for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "SEND_LIMIT_EXCEEDED: Agreement creation quota of the user is exhausted.",
              "code": "403"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "RESOURCE_MODIFIED: Resource is already modified with newer version.",
              "code": "412"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "AgreementStateInfo",
              "description": "",
              "type": "AgreementStateInfo",
              "required": true
            }
          ],
          "order": 75
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/me/note",
      "operations": [
        {
          "summary": "Updates the latest note associated with an agreement.",
          "notes": null,
          "nickname": "updateAgreementNoteForApiUser",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "Note",
              "description": "The note to be associated with the agreement.",
              "type": "Note",
              "required": true
            }
          ],
          "order": 78
        }
      ]
    },
    {
      "path": "/agreements/{agreementId}/documents",
      "operations": [
        {
          "summary": "Deletes all the documents of an agreement.",
          "notes": null,
          "nickname": "deleteDocuments",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_retention"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "DOCUMENTS_REMOVED: The documents have already been removed.",
              "code": "404"
            },
            {
              "reason": "INVALID_AGREEMENT_ID: The Agreement ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "DYNAMIC_DOCUMENT_EXPIRATION_NOT_ENABLED: The operation requires some account settings to be enabled. Please contact the Adobe Sign team to enable the settings.",
              "code": "412"
            },
            {
              "reason": "RESOURCE_MODIFIED: Resource is already modified with newer version.",
              "code": "412"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            },
            {
              "reason": "REMOVE_FAILED: The system failed to remove the Document.",
              "code": "500"
            }
          ],
          "httpMethod": "DELETE",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_retention')\" oncontextmenu=\"this.href=oauthDoc('agreement_retention')\" target=\"oauthDoc\">agreement_retention</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "agreementId",
              "description": "The agreement identifier, as returned by the agreement creation API or retrieved from the API to fetch agreements.",
              "type": "string",
              "required": true
            }
          ],
          "order": 82
        }
      ]
    }
  ],
  "resourcePath": "/agreements",
  "produces": [
    "application/json",
    "application/pdf",
    "text/csv"
  ]
}
