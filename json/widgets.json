{
  "models": {
    "PhoneInfo": {
      "id": "PhoneInfo",
      "properties": {
        "countryIsoCode": {
          "description": "The country ISO Alpha-2 code required for the participant to view and sign the document if authentication method is PHONE",
          "type": "string",
          "required": false
        },
        "phone": {
          "description": "The phone number required for the participant to view and sign the document if authentication method is PHONE. When replacing a participant that has PHONE authentication specified, you must supply a phone number for the new participant.",
          "type": "string",
          "required": false
        },
        "countryCode": {
          "description": "The numeric country calling code (ISD code) required for the participant to view and sign the document if authentication type is PHONE",
          "type": "string",
          "required": false
        }
      }
    },
    "WidgetViews": {
      "id": "WidgetViews",
      "properties": {
        "widgetViewList": {
          "description": "List of web form views",
          "type": "array",
          "items": {
            "$ref": "WidgetView"
          },
          "required": true
        }
      }
    },
    "UserWidgets": {
      "id": "UserWidgets",
      "properties": {
        "userWidgetList": {
          "description": "An array of web form items",
          "type": "array",
          "items": {
            "$ref": "UserWidget"
          },
          "required": true
        },
        "page": {
          "description": "Pagination information for navigating through the response",
          "type": "PageInfo",
          "items": {
            "$ref": "PageInfo"
          },
          "required": true
        }
      }
    },
    "Document": {
      "id": "Document",
      "properties": {
        "numPages": {
          "description": "Number of pages in the document",
          "type": "integer",
          "required": true
        },
        "createdDate": {
          "description": "The date the document was created",
          "type": "date",
          "required": true
        },
        "name": {
          "description": "Name of the original document uploaded. This is returned in GET but not accepted back in PUT",
          "type": "string",
          "required": false
        },
        "id": {
          "description": "ID of the document. In case of PUT call, this is the only field that is accepted in Document structure. Name and mimeType are ignored in case of PUT call",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label of the document",
          "type": "string",
          "required": true
        },
        "mimeType": {
          "description": "mimeType of the original file. This is returned in GET but not accepted back in PUT",
          "type": "string",
          "required": false
        }
      }
    },
    "WidgetStateInfo": {
      "id": "WidgetStateInfo",
      "properties": {
        "widgetInActiveInfo": {
          "description": "The custom message which will be displayed to the user or the URL to which user will be redirected when the web form is accessed in a disabled state. This can only be specified in PUT request",
          "type": "WidgetInActiveInfo",
          "items": {
            "$ref": "WidgetInActiveInfo"
          },
          "required": false
        },
        "state": {
          "description": "State of the Web Form",
          "type": "string",
          "required": true,
          "enum": [
            "ACTIVE",
            "INACTIVE",
            "AUTHORING",
            "CANCELLED"
          ]
        }
      }
    },
    "WidgetRedirectionInfo": {
      "id": "WidgetRedirectionInfo",
      "properties": {
        "delay": {
          "description": "The delay (in seconds) before the user is taken to the resultant page. If this value is greater than 0, the user will first see the standard Adobe Sign result message, and then after a delay will be redirected to your resultant page. \n Note that this parameter has no effect for embedded web forms when deframe is true",
          "type": "integer",
          "required": false
        },
        "deframe": {
          "description": "If deframe is false, the resultant page will be shown inside the web form frame. If deframe is true, the resultant page will be shown in the full browser window. \n Note that in the case of embedded web forms, browser security restrictions do not permit automatic redirection in the full browser window, so if deframe is true the user will instead just see a link to the success page. We recommend this scenario be avoided - in other words, setting deframe to false is recommended for embedded web forms",
          "type": "boolean",
          "required": false
        },
        "url": {
          "description": "A publicly accessible url to which the user will be sent after successfully completing the web form. \nIf the URL you provide includes information that allows you to identify the specific transaction, such as your own unique identifier, you can use the browser request to this URL as a callback to notify you that this transaction is completed. \nIn addition, Adobe Sign will append a documentKey parameter to the URL which will contain the Adobe Sign DocumentKey for this signed web form, but only if the sender is the same as the API key user. Your application can use this value to get the form data for this web form",
          "type": "string",
          "required": true
        }
      }
    },
    "FileInfo": {
      "id": "FileInfo",
      "properties": {
        "transientDocumentId": {
          "description": "ID for a transient document that will be added to the web form",
          "showInSampleRequest": true,
          "type": "string",
          "required": false
        },
        "document": {
          "description": "A document that is associated with the web form. This field cannot be provided in POST call. In case of GET call, this is the only field returned in the response",
          "type": "Document",
          "items": {
            "$ref": "Document"
          },
          "required": false
        },
        "urlFileInfo": {
          "description": "URL for an external document to add to the agreement",
          "type": "URLFileInfo",
          "items": {
            "$ref": "URLFileInfo"
          },
          "required": false
        }
      }
    },
    "ShareParticipantInfo": {
      "id": "ShareParticipantInfo",
      "properties": {
        "participantId": {
          "description": "The unique identifier of the sharee participant of the web form.",
          "type": "string",
          "required": true
        },
        "hidden": {
          "description": "True if the web form is hidden for the user that is calling the API. Only returned if self is true.",
          "type": "boolean",
          "required": true
        },
        "name": {
          "description": "Name of the sharee participant of the web form, if available.",
          "type": "string",
          "required": true
        },
        "self": {
          "description": "True if the Share participant of the web form is the same user that is calling the API.",
          "type": "boolean",
          "required": true
        },
        "sharerParticipantId": {
          "description": "The unique identifier of the participant who shared the web form.",
          "type": "string",
          "required": true
        },
        "company": {
          "description": "Company of the sharee participant of the web form, if available.",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "Email of the sharee participant of the web form.",
          "type": "string",
          "required": true
        }
      }
    },
    "ShareCreationResponse": {
      "id": "ShareCreationResponse",
      "properties": {
        "participantId": {
          "description": "The unique identifier of the participant",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "The email address that was requested",
          "type": "string",
          "required": true
        }
      }
    },
    "WidgetCreationInfoV6": {
      "id": "WidgetInfo",
      "properties": {
        "additionalParticipantSetsInfo": {
          "description": "List of all the participants in the web form except web form signer",
          "type": "array",
          "items": {
            "$ref": "WidgetAdditionalParticipationSetInfo"
          },
          "required": false
        },
        "creatorEmail": {
          "description": "Email of web form creator. Only returned in GET response. Cannot be provided in POST/PUT request. If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false
        },
        "groupId": {
          "description": "The ID of the group to which the widget belongs to. If not provided during creation, primary group of the creator will be used",
          "type": "string",
          "required": false
        },
        "locale": {
          "description": "The locale associated with this web form - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the web form creator",
          "type": "string",
          "required": false
        },
        "vaultingInfo": {
          "description": "Vaulting properties that allows Adobe Sign to securely store documents with a vault provider",
          "type": "VaultingInfo",
          "items": {
            "$ref": "VaultingInfo"
          },
          "required": false
        },
        "securityOption": {
          "description": "Secondary security parameters for the web form",
          "type": "SecurityOption",
          "items": {
            "$ref": "SecurityOption"
          },
          "required": false
        },
        "widgetParticipantSetInfo": {
          "description": "Represents web form participant for whom email should not be provided",
          "type": "WidgetParticipantSetInfo",
          "items": {
            "$ref": "WidgetParticipantSetInfo"
          },
          "required": true
        },
        "widgetInActiveInfo": {
          "description": "The custom message which will be displayed to the user or the URL to which user will be redirected when the web form is accessed in a disabled state. This can only be specified in PUT request",
          "type": "WidgetInActiveInfo",
          "items": {
            "$ref": "WidgetInActiveInfo"
          },
          "required": false
        },
        "ccs": {
          "description": "A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email when the final agreement created through web form is signed. The email addresses will also receive a copy of the document, attached as a PDF file",
          "type": "array",
          "items": {
            "$ref": "WidgetCcInfo"
          },
          "required": false
        },
        "createdDate": {
          "format": "date",
          "description": "Date when web form was created. If provided in POST, it will simply be ignored. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "isDocumentRetentionApplied": {
          "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "lastEventDate": {
          "format": "date",
          "description": "The date of the last event that occurred for this web form.  Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "name": {
          "description": "The name of the web form that will be used to identify it, in emails, website and other places",
          "type": "string",
          "required": true
        },
        "completionInfo": {
          "description": "URL and associated properties for the success page the web form signer will be taken to after performing desired action on the web form",
          "type": "WidgetRedirectionInfo",
          "items": {
            "$ref": "WidgetRedirectionInfo"
          },
          "required": false
        },
        "authFailureInfo": {
          "description": "URL and associated properties for the error page the web form signer will be taken after failing to authenticate",
          "type": "WidgetRedirectionInfo",
          "items": {
            "$ref": "WidgetRedirectionInfo"
          },
          "required": false
        },
        "fileInfos": {
          "description": "A list of one or more files (or references to files) that will be used to create the web form. If more than one file is provided, they will be combined before the web form is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified",
          "type": "array",
          "items": {
            "$ref": "FileInfo"
          },
          "required": true
        },
        "id": {
          "description": "A resource identifier that can be used to uniquely identify the web form in other apis. If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false
        },
        "state": {
          "description": "The state in which the web form should land. For example in order to create a web form in DRAFT state, field should be DRAFT. The state field will never get returned in GET /widgets/{ID} and will be ignored if provided in PUT /widgets/{ID} call. The eventual status of the web form can be obtained from GET /widgets/ID",
          "type": "string",
          "required": true,
          "enum": [
            "DRAFT",
            "ACTIVE",
            "AUTHORING"
          ]
        },
        "status": {
          "description": "Status of the Web Form. If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false,
          "enum": [
            "DRAFT",
            "AUTHORING",
            "ACTIVE",
            "DOCUMENTS_NOT_YET_PROCESSED",
            "DISABLED",
            "DISCARDED"
          ]
        }
      }
    },
    "ProviderParticipantSetInfo": {
      "id": "ProviderParticipantSetInfo",
      "properties": {
        "actionRequired": {
          "description": "It indicates whether it is mandatory or not for the provider participant to provide the details for the unknown participant",
          "type": "boolean",
          "required": true
        },
        "actionDescription": {
          "description": "The description for the provider participant who is responsible to provide details like name, email for the unknown participant.",
          "type": "string",
          "required": false
        }
      }
    },
    "ShareCreationResponseList": {
      "id": "ShareCreationResponseList",
      "properties": {
        "shareCreationResponseList": {
          "description": "List of ShareCreationResponse",
          "type": "array",
          "items": {
            "$ref": "ShareCreationResponse"
          },
          "required": true
        }
      }
    },
    "DisplayWidgetParticipantSetInfo": {
      "id": "DisplayParticipantSetInfo",
      "properties": {
        "displayUserSetMemberInfos": {
          "description": "Displays the info about user set",
          "type": "array",
          "items": {
            "$ref": "DisplayParticipantInfo"
          },
          "required": true
        }
      }
    },
    "DetailedParticipantInfo": {
      "id": "DetailedParticipantInfo",
      "properties": {
        "createdDate": {
          "description": "The date when the participant was added. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
          "type": "date",
          "required": false
        },
        "hidden": {
          "description": "True if the agreement is hidden for the user that is calling the API. Only returned if self is true. Ignored (not required) if modifying a participant (PUT).",
          "type": "boolean",
          "required": false
        },
        "name": {
          "description": "The name of the participant, if available. This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": false
        },
        "self": {
          "description": "True if this participant is the same user that is calling the API. Returned as part of Get. Ignored (not required) if modifying a participant set (PUT).",
          "type": "boolean",
          "required": false
        },
        "company": {
          "description": "The company of the participant, if available. This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": false
        },
        "id": {
          "description": "The unique identifier of the participant. This will be returned as part of Get call but is not mandatory to be passed as part of PUT call for agreements/{id}/members/participantSets/{id}.",
          "type": "string",
          "required": false
        },
        "userId": {
          "description": "The user ID of the participant. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
          "type": "string",
          "required": false
        },
        "email": {
          "description": "Email of the participant. In case of modifying a participant set (PUT) this is a required field. In case of GET, this is the required field and will always be returned unless it is a fax workflow (legacy agreements) that were created using fax as input",
          "type": "string",
          "required": true
        },
        "securityOption": {
          "description": "Security options that apply to the participant.",
          "type": "ParticipantSecurityOption",
          "items": {
            "$ref": "ParticipantSecurityOption"
          },
          "required": true
        }
      }
    },
    "DocumentUrl": {
      "id": "DocumentUrl",
      "properties": {
        "url": {
          "description": "Secure URL of the document",
          "type": "string",
          "required": true
        }
      }
    },
    "WidgetView": {
      "id": "WidgetView",
      "properties": {
        "isCurrent": {
          "description": "True if this view is the current view",
          "type": "boolean",
          "required": true
        },
        "embeddedCode": {
          "description": "Embedded code of url of resource ",
          "type": "string",
          "required": false
        },
        "name": {
          "description": "Name of the requested web form view",
          "showInSampleRequest": true,
          "type": "string",
          "required": true,
          "enum": [
            "AUTHORING",
            "DOCUMENT",
            "MANAGE",
            "POST_CREATE",
            "SIGNING",
            "ALL"
          ]
        },
        "expiration": {
          "format": "date",
          "description": "Expiration of user url ",
          "type": "string",
          "required": false
        },
        "url": {
          "description": "Url of resource location",
          "type": "string",
          "required": false
        }
      }
    },
    "WidgetInActiveInfo": {
      "id": "WidgetInActiveInfo",
      "properties": {
        "redirectUrl": {
          "description": "Redirect the user to this URL when the web form is accessed. This is required if message is not provided. Both message and redirectUrl cannot be specified.",
          "type": "string",
          "required": true
        },
        "message": {
          "description": "Display this custom message to the user when the web form is accessed. Note that this can contain wiki markup to include clickable links in the message. This is required if redirectUrl is not provided. Both message and redirectUrl cannot be specified.",
          "type": "string",
          "required": true
        }
      }
    },
    "ShareCreationInfoList": {
      "id": "ShareCreationInfoList",
      "properties": {
        "shareCreationInfo": {
          "description": "List of ShareCreationInfo",
          "type": "array",
          "items": {
            "$ref": "ShareCreationInfo"
          },
          "required": true
        }
      }
    },
    "BasicDocumentsImageUrlsInfo": {
      "id": "BasicDocumentsImageUrlsInfo",
      "properties": {
        "documentsImageUrlsInfo": {
          "description": "A list of original document image URLs info.",
          "type": "array",
          "items": {
            "$ref": "DocumentImageUrlsInfo"
          },
          "required": true
        }
      }
    },
    "ShareCreationInfo": {
      "id": "ShareCreationInfo",
      "properties": {
        "message": {
          "description": "Optional message to the sharee",
          "type": "string",
          "required": false
        },
        "email": {
          "description": "The email address of the member with whom the agreement will be shared",
          "type": "string",
          "required": true
        }
      }
    },
    "DigitalSignatureInfo": {
      "id": "DigitalSignatureInfo",
      "properties": {
        "name": {
          "description": "Name captured during digital signing",
          "type": "string",
          "required": true
        },
        "company": {
          "description": "Company name captured during digital signing",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "Email captured during digital signing",
          "type": "string",
          "required": true
        }
      }
    },
    "AccountSharerInfo": {
      "id": "AccountSharerInfo",
      "properties": {
        "permissions": {
          "description": "A list of permissions given for this account sharing.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "VIEW",
              "SEND",
              "MODIFY"
            ]
          },
          "required": true
        },
        "fullName": {
          "description": "Full name of this account sharer.",
          "type": "string",
          "required": true
        },
        "userId": {
          "description": "A unique identifier of the user resource for REST APIs as issued by Sign.",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "The email address of the user",
          "type": "string",
          "required": true
        }
      }
    },
    "VisibilityInfo": {
      "id": "VisibilityInfo",
      "properties": {
        "visibility": {
          "description": "Specifies the visibility. The possible values are HIDE or SHOW",
          "type": "string",
          "required": true,
          "enum": [
            "SHOW",
            "HIDE"
          ]
        }
      }
    },
    "ParticipantSecurityOption": {
      "id": "ParticipantSecurityOption",
      "properties": {
        "password": {
          "description": "The password required for the participant to view and sign the document. Note that AdobeSign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. The password will not be returned in GET call. When replacing a participant that has PASSWORD authentication specified, you must supply a password for the new participant.",
          "type": "string",
          "required": false
        },
        "authenticationMethod": {
          "description": "The authentication method for the participants to have access to view and sign the document. When replacing a participant that has PASSWORD or PHONE authentication specified, you must supply a password or phone number for the new participant, and you cannot change the authentication method. \nFor unknown participants, only email based authentication is allowed. Hence, only ‘NONE’ authenticaiton method is permitted",
          "type": "string",
          "required": true,
          "enum": [
            "NONE",
            "PASSWORD",
            "PHONE",
            "KBA",
            "WEB_IDENTITY",
            "ADOBE_SIGN",
            "GOV_ID"
          ]
        },
        "phoneInfo": {
          "description": "The phoneInfo required for the participant to view and sign the document",
          "type": "PhoneInfo",
          "items": {
            "$ref": "PhoneInfo"
          },
          "required": false
        }
      }
    },
    "PageImageUrl": {
      "id": "PageImageUrl",
      "properties": {
        "pageNumber": {
          "description": "Page number within the document.",
          "type": "integer",
          "required": true
        },
        "url": {
          "description": "An image url.",
          "type": "string",
          "required": true
        }
      }
    },
    "PersonalizedSigningViewConfiguration": {
      "id": "PersonalizedSigningViewConfiguration",
      "properties": {
        "comment": {
          "description": "Comment describing how the API caller established the signer's identity - will appear in the audit trail",
          "type": "string",
          "required": false
        },
        "expiration": {
          "format": "date",
          "description": "Expiration date for the personalization of this web form. After this date, the identity of the signer will not be assumed by Adobe Sign. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2022-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "email": {
          "description": "The email address of the person who will be receiving this web form",
          "type": "string",
          "required": true
        },
        "reusable": {
          "description": "Should the intended signer be allowed to sign this web form more than once",
          "type": "boolean",
          "required": false
        }
      }
    },
    "Note": {
      "id": "Note",
      "properties": {
        "note": {
          "description": "Content of Note field",
          "type": "string",
          "required": true
        }
      }
    },
    "ParticipantSetMemberInfo": {
      "id": "ParticipantInfo",
      "properties": {
        "id": {
          "description": "The unique identifier of the participant. This will be ignored as part of POST or PUT calls. The Id might be null in draft state",
          "type": "string",
          "required": false
        },
        "email": {
          "description": "Email of the participant. It should be blank for the unknown participants.",
          "type": "string",
          "required": true
        },
        "securityOption": {
          "description": "Security options that apply to the participant",
          "type": "ParticipantSecurityOption",
          "items": {
            "$ref": "ParticipantSecurityOption"
          },
          "required": false
        }
      }
    },
    "MyAgreementInfo": {
      "id": "MyAgreementInfo",
      "properties": {
        "accountSharers": {
          "description": "A list of account sharer in relation to the api caller and this resource.",
          "type": "array",
          "items": {
            "$ref": "AccountSharerInfo"
          },
          "required": true
        }
      }
    },
    "DetailedWidgetParticipantSetInfo": {
      "id": "DetailedWidgetParticipantSetInfo",
      "properties": {
        "providerParticipantSetInfo": {
          "description": "Represents the attributes related to a unknown participant's provider.",
          "type": "ProviderParticipantSetInfo",
          "items": {
            "$ref": "ProviderParticipantSetInfo"
          },
          "required": false
        },
        "role": {
          "description": "Role assumed by all participants in the set (signer, approver etc.). This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": true,
          "enum": [
            "SIGNER",
            "SENDER",
            "APPROVER",
            "ACCEPTOR",
            "CERTIFIED_RECIPIENT",
            "FORM_FILLER",
            "DELEGATE_TO_SIGNER",
            "DELEGATE_TO_APPROVER",
            "DELEGATE_TO_ACCEPTOR",
            "DELEGATE_TO_CERTIFIED_RECIPIENT",
            "DELEGATE_TO_FORM_FILLER",
            "SHARE"
          ]
        },
        "id": {
          "description": "The unique identifier of the participant set. This cannot be changed as part of the PUT call.",
          "type": "string",
          "required": false
        },
        "memberInfos": {
          "description": "Array of ParticipantInfo objects, containing participant-specific data (e.g. email). All participants in the array belong to the same set",
          "type": "array",
          "items": {
            "$ref": "DetailedParticipantInfo"
          },
          "required": true
        },
        "order": {
          "description": "Index indicating sequential signing group (specified for hybrid routing). This cannot be changed as part of the PUT call.",
          "type": "integer",
          "required": true
        }
      }
    },
    "WidgetAgreement": {
      "id": "UserAgreement",
      "properties": {
        "hidden": {
          "description": "True if agreement is hidden for the user",
          "type": "boolean",
          "required": true
        },
        "displayDate": {
          "format": "date",
          "description": "The display date for the agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": true
        },
        "groupId": {
          "description": "Unique identifier of the group",
          "type": "string",
          "required": true
        },
        "esign": {
          "description": "True if this is an e-sign document",
          "type": "boolean",
          "required": true
        },
        "name": {
          "description": "Name of the Agreement",
          "type": "string",
          "required": true
        },
        "displayParticipantSetInfos": {
          "description": "The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user",
          "type": "array",
          "items": {
            "$ref": "DisplayWidgetParticipantSetInfo"
          },
          "required": true
        },
        "latestVersionId": {
          "description": "A version ID which uniquely identifies the current version of the agreement",
          "type": "string",
          "required": true
        },
        "id": {
          "description": "The unique identifier of the agreement.If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false
        },
        "type": {
          "description": "The kind of agreement",
          "type": "string",
          "required": false,
          "enum": [
            "AGREEMENT",
            "MEGASIGN_CHILD",
            "WIDGET_INSTANCE"
          ]
        },
        "parentId": {
          "description": "The parent id of a megaSign child *OR* the originating id of a widget agreement instance",
          "type": "string",
          "required": false
        },
        "status": {
          "description": "The current status of the document from the perspective of the originator",
          "type": "string",
          "required": true,
          "enum": [
            "WAITING_FOR_MY_SIGNATURE",
            "WAITING_FOR_MY_APPROVAL",
            "WAITING_FOR_MY_DELEGATION",
            "WAITING_FOR_MY_ACKNOWLEDGEMENT",
            "WAITING_FOR_MY_ACCEPTANCE",
            "WAITING_FOR_MY_FORM_FILLING",
            "OUT_FOR_SIGNATURE",
            "OUT_FOR_APPROVAL",
            "OUT_FOR_DELIVERY",
            "OUT_FOR_ACCEPTANCE",
            "OUT_FOR_FORM_FILLING",
            "SIGNED",
            "APPROVED",
            "FORM_FILLED",
            "DELIVERED",
            "ACCEPTED",
            "ARCHIVED",
            "CANCELLED",
            "EXPIRED",
            "WAITING_FOR_PREFILL",
            "DOCUMENTS_NOT_YET_PROCESSED",
            "WAITING_FOR_MY_VERIFICATION",
            "WAITING_FOR_VERIFICATION"
          ]
        }
      }
    },
    "WidgetCcInfo": {
      "id": "CcInfo",
      "properties": {
        "email": {
          "description": "Email of the CC participant of the web form",
          "type": "string",
          "required": true
        }
      }
    },
    "WidgetInfo": {
      "id": "WidgetInfo",
      "properties": {
        "additionalParticipantSetsInfo": {
          "description": "List of all the participants in the web form except web form signer",
          "type": "array",
          "items": {
            "$ref": "WidgetAdditionalParticipationSetInfo"
          },
          "required": false
        },
        "creatorEmail": {
          "description": "Email of web form creator. Only returned in GET response. Cannot be provided in POST/PUT request. If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false
        },
        "groupId": {
          "description": "The ID of the group to which the widget belongs to. If not provided during creation, primary group of the creator will be used",
          "type": "string",
          "required": false
        },
        "locale": {
          "description": "The locale associated with this web form - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the web form creator",
          "type": "string",
          "required": false
        },
        "vaultingInfo": {
          "description": "Vaulting properties that allows Adobe Sign to securely store documents with a vault provider",
          "type": "VaultingInfo",
          "items": {
            "$ref": "VaultingInfo"
          },
          "required": false
        },
        "securityOption": {
          "description": "Secondary security parameters for the web form",
          "type": "SecurityOption",
          "items": {
            "$ref": "SecurityOption"
          },
          "required": false
        },
        "widgetParticipantSetInfo": {
          "description": "Represents web form participant for whom email should not be provided",
          "type": "WidgetParticipantSetInfo",
          "items": {
            "$ref": "WidgetParticipantSetInfo"
          },
          "required": true
        },
        "widgetInActiveInfo": {
          "description": "The custom message which will be displayed to the user or the URL to which user will be redirected when the web form is accessed in a disabled state. This can only be specified in PUT request",
          "type": "WidgetInActiveInfo",
          "items": {
            "$ref": "WidgetInActiveInfo"
          },
          "required": false
        },
        "ccs": {
          "description": "A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email when the final agreement created through web form is signed. The email addresses will also receive a copy of the document, attached as a PDF file",
          "type": "array",
          "items": {
            "$ref": "WidgetCcInfo"
          },
          "required": false
        },
        "createdDate": {
          "format": "date",
          "description": "Date when web form was created. If provided in POST, it will simply be ignored. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "isDocumentRetentionApplied": {
          "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "lastEventDate": {
          "format": "date",
          "description": "The date of the last event that occurred for this web form.  Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "name": {
          "description": "The name of the web form that will be used to identify it, in emails, website and other places",
          "type": "string",
          "required": true
        },
        "completionInfo": {
          "description": "URL and associated properties for the success page the web form signer will be taken to after performing desired action on the web form",
          "type": "WidgetRedirectionInfo",
          "items": {
            "$ref": "WidgetRedirectionInfo"
          },
          "required": false
        },
        "authFailureInfo": {
          "description": "URL and associated properties for the error page the web form signer will be taken after failing to authenticate",
          "type": "WidgetRedirectionInfo",
          "items": {
            "$ref": "WidgetRedirectionInfo"
          },
          "required": false
        },
        "fileInfos": {
          "description": "A list of one or more files (or references to files) that will be used to create the web form. If more than one file is provided, they will be combined before the web form is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified",
          "type": "array",
          "items": {
            "$ref": "FileInfo"
          },
          "required": true
        },
        "id": {
          "description": "A resource identifier that can be used to uniquely identify the web form in other apis. If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false
        },
        "state": {
          "description": "The state in which the web form should land. For example in order to create a web form in DRAFT state, field should be DRAFT. The state field will never get returned in GET /widgets/{ID} and will be ignored if provided in PUT /widgets/{ID} call. The eventual status of the web form can be obtained from GET /widgets/ID",
          "type": "string",
          "required": false,
          "enum": [
            "DRAFT",
            "ACTIVE",
            "AUTHORING"
          ]
        },
        "status": {
          "description": "Status of the Web Form. If provided in POST, it will simply be ignored",
          "type": "string",
          "required": true,
          "enum": [
            "DRAFT",
            "AUTHORING",
            "ACTIVE",
            "DOCUMENTS_NOT_YET_PROCESSED",
            "DISABLED",
            "DISCARDED"
          ]
        }
      }
    },
    "WidgetEventList": {
      "id": "EventList",
      "properties": {
        "events": {
          "description": "An array of event objects.",
          "type": "array",
          "items": {
            "$ref": "WidgetEvent"
          },
          "required": true
        }
      }
    },
    "CCParticipantInfo": {
      "id": "CCParticipantInfo",
      "properties": {
        "participantId": {
          "description": " The unique identifier of the CC participant of the web form.",
          "type": "string",
          "required": true
        },
        "hidden": {
          "description": "True if the web form is hidden for the user that is calling the API. Only returned if self is true.",
          "type": "boolean",
          "required": true
        },
        "name": {
          "description": "Name of the CC participant, if available.",
          "type": "string",
          "required": true
        },
        "self": {
          "description": "True if the CC participant of the web form is the same user that is calling the API.",
          "type": "boolean",
          "required": true
        },
        "company": {
          "description": "Company of the CC participant, if available.",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "Email of the CC participant of the web form",
          "type": "string",
          "required": true
        }
      }
    },
    "WidgetDocuments": {
      "id": "WidgetDocuments",
      "properties": {
        "documents": {
          "description": "A list of documents",
          "type": "array",
          "items": {
            "$ref": "Document"
          },
          "required": true
        }
      }
    },
    "SecurityOption": {
      "id": "SecurityOption",
      "properties": {
        "openPassword": {
          "description": "The secondary password that will be used to secure the PDF document. Note that AdobeSign will never show this password to anyone, so you will need to separately communicate it to any relevant parties",
          "type": "string",
          "required": false
        }
      }
    },
    "WidgetAgreements": {
      "id": "UserAgreements",
      "properties": {
        "userAgreementList": {
          "description": "An array of UserAgreement items",
          "type": "array",
          "items": {
            "$ref": "WidgetAgreement"
          },
          "required": true
        },
        "page": {
          "description": "Pagination information for navigating through the response",
          "type": "PageInfo",
          "items": {
            "$ref": "PageInfo"
          },
          "required": true
        }
      }
    },
    "WidgetParticipantSetInfo": {
      "id": "WidgetParticipantSetInfo",
      "properties": {
        "role": {
          "description": "Role assumed by all participants in the set (signer, approver, etc.) Web Form First Participant will only have roles - Signer, Approver, Acceptor and Form Filler",
          "type": "string",
          "required": true,
          "enum": [
            "SIGNER",
            "DELEGATE_TO_SIGNER",
            "APPROVER",
            "DELEGATE_TO_APPROVER",
            "ACCEPTOR",
            "DELEGATE_TO_ACCEPTOR",
            "FORM_FILLER",
            "DELEGATE_TO_FORM_FILLER",
            "CERTIFIED_RECIPIENT",
            "DELEGATE_TO_CERTIFIED_RECIPIENT"
          ]
        },
        "memberInfos": {
          "description": "Array of ParticipantInfo objects, containing participant - specific data (email, e.g.). All participants in the array belong to the same set. Currently we are supporting only one member in the set. Since the email of the web form signer is unknown at the time of web form creation, the email should be left empty and its optional security options should be provided. ",
          "type": "array",
          "items": {
            "$ref": "ParticipantSetMemberInfo"
          },
          "required": true
        }
      }
    },
    "VaultingInfo": {
      "id": "VaultingInfo",
      "properties": {
        "enabled": {
          "description": "For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted",
          "type": "boolean",
          "required": false
        }
      }
    },
    "WidgetEvent": {
      "id": "Event",
      "properties": {
        "date": {
          "format": "date",
          "description": "The date of the audit event. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": true
        },
        "initiatingUserName": {
          "description": "Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
          "type": "string",
          "required": true
        },
        "description": {
          "description": "A description of the audit event",
          "type": "string",
          "required": true
        },
        "actingUserName": {
          "description": "The name of the acting user",
          "type": "string",
          "required": true
        },
        "actingUserIpAddress": {
          "description": "The IP address of the user that created the event",
          "type": "string",
          "required": true
        },
        "participantEmail": {
          "description": "Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
          "type": "string",
          "required": true
        },
        "type": {
          "description": "Type of web form event",
          "type": "string",
          "required": true,
          "enum": [
            "AUTO_CANCELLED_CONVERSION_PROBLEM",
            "ACTIVATED",
            "CREATED",
            "DEACTIVATED",
            "MODIFIED"
          ]
        },
        "participantRole": {
          "description": "Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).",
          "type": "string",
          "required": true,
          "enum": [
            "SIGNER",
            "DELEGATE_TO_SIGNER",
            "APPROVER",
            "DELEGATE_TO_APPROVER",
            "ACCEPTOR",
            "DELEGATE_TO_ACCEPTOR",
            "FORM_FILLER",
            "DELEGATE_TO_FORM_FILLER",
            "CERTIFIED_RECIPIENT",
            "DELEGATE_TO_CERTIFIED_RECIPIENT",
            "SHARE",
            "SENDER"
          ]
        },
        "vaultEventId": {
          "description": "The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)",
          "type": "string",
          "required": true
        },
        "participantId": {
          "description": "The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
          "type": "string",
          "required": true
        },
        "versionId": {
          "description": "An ID which uniquely identifies the version of the document associated with this audit event",
          "type": "string",
          "required": true
        },
        "actingUserEmail": {
          "description": "Email address of the user that created the event",
          "type": "string",
          "required": true
        },
        "devicePhoneNumber": {
          "description": "Phone number from the device used when the participation is completed on a mobile phone",
          "type": "string",
          "required": true
        },
        "initiatingUserEmail": {
          "description": "Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
          "type": "string",
          "required": true
        },
        "digitalSignatureInfo": {
          "description": "This is present for ESIGNED events when the participation is signed digitally",
          "type": "DigitalSignatureInfo",
          "items": {
            "$ref": "DigitalSignatureInfo"
          },
          "required": true
        },
        "vaultProviderName": {
          "description": "Name of the vault provider for the vault event (if vaulted, otherwise null)",
          "type": "string",
          "required": true
        },
        "comment": {
          "description": "The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant",
          "type": "string",
          "required": false
        },
        "id": {
          "description": "The identifier for the event.",
          "type": "string",
          "required": false
        },
        "synchronizationId": {
          "description": "A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)",
          "type": "string",
          "required": true
        },
        "deviceLocation": {
          "description": "Location of the device that generated the event (This value may be null due to limited privileges)",
          "type": "WidgetEventDeviceLocation",
          "items": {
            "$ref": "WidgetEventDeviceLocation"
          },
          "required": true
        }
      }
    },
    "SenderInfo": {
      "id": "SenderInfo",
      "properties": {
        "participantId": {
          "description": " The unique identifier of the creator of the web form.",
          "type": "string",
          "required": true
        },
        "createdDate": {
          "description": "The date when the sender was added. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
          "type": "date",
          "required": false
        },
        "hidden": {
          "description": "True if the web form is hidden for the user that is calling the API. Only returned if self is true.",
          "type": "boolean",
          "required": true
        },
        "name": {
          "description": "Name of the creator, if available.",
          "type": "string",
          "required": true
        },
        "self": {
          "description": "True if the creator of the web form is the same user that is calling the API.",
          "type": "boolean",
          "required": true
        },
        "company": {
          "description": "Company of the creator, if available.",
          "type": "string",
          "required": true
        },
        "userId": {
          "description": "The user ID of the sender. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
          "type": "string",
          "required": false
        },
        "email": {
          "description": "Email of the creator of the web form.",
          "type": "string",
          "required": true
        }
      }
    },
    "WidgetCreationResponse": {
      "description": "A JSON object describing the widget",
      "id": "WidgetCreationResponse",
      "properties": {
        "id": {
          "description": "The unique identifier of web form which can be used to retrieve the data entered by the signers.",
          "type": "string",
          "required": true
        }
      }
    },
    "UserWidget": {
      "id": "UserWidget",
      "properties": {
        "hidden": {
          "description": "True if agreement is hidden for the user",
          "type": "boolean",
          "required": true
        },
        "groupId": {
          "description": "Unique identifier of the group",
          "type": "string",
          "required": true
        },
        "modifiedDate": {
          "format": "date",
          "description": "The date on which the web form was last modified. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": true
        },
        "name": {
          "description": "The name of the web form.",
          "type": "string",
          "required": true
        },
        "id": {
          "description": "The unique identifier of a web form",
          "type": "string",
          "required": true
        },
        "javascript": {
          "description": "The embedded javascript code of the web form",
          "type": "string",
          "required": true
        },
        "url": {
          "description": "The hosted url of the web form",
          "type": "string",
          "required": true
        },
        "status": {
          "description": "The web form status (AUTHORING, ACTIVE, DRAFT, DISABLED)",
          "type": "string",
          "required": true,
          "enum": [
            "AUTHORING",
            "ACTIVE",
            "DRAFT",
            "DISABLED"
          ]
        }
      }
    },
    "WidgetViewInfo": {
      "id": "WidgetViewInfo",
      "properties": {
        "commonViewConfiguration": {
          "description": "Common view configuration for all the available views",
          "type": "CommonViewConfiguration",
          "items": {
            "$ref": "CommonViewConfiguration"
          },
          "required": false
        },
        "name": {
          "description": "Name of the requested web form view",
          "showInSampleRequest": true,
          "type": "string",
          "required": true,
          "enum": [
            "AUTHORING",
            "DOCUMENT",
            "MANAGE",
            "POST_CREATE",
            "SIGNING",
            "ALL"
          ]
        },
        "personalizedSigningViewConfiguration": {
          "description": "Personalized SIGNING view configuration",
          "type": "PersonalizedSigningViewConfiguration",
          "items": {
            "$ref": "PersonalizedSigningViewConfiguration"
          },
          "required": false
        }
      }
    },
    "WidgetEventDeviceLocation": {
      "id": "WidgetEventDeviceLocation",
      "properties": {
        "latitude": {
          "description": "Latitude coordinate",
          "type": "float",
          "required": true
        },
        "longitude": {
          "description": "Longitude coordinate",
          "type": "float",
          "required": true
        }
      }
    },
    "WidgetAdditionalParticipationSetInfo": {
      "id": "WidgetAdditionalParticipationSetInfo",
      "properties": {
        "providerParticipantSetInfo": {
          "description": "Represents all the attributes related to the unknown participant and its provider. If it is defined then the participant will be treated as an unknown participant.",
          "type": "ProviderParticipantSetInfo",
          "items": {
            "$ref": "ProviderParticipantSetInfo"
          },
          "required": false
        },
        "role": {
          "description": "Role assumed by all participants in the set (signer, approver, etc.) Web Form First Participant will only have roles - Signer, Approver, Acceptor and Form Filler",
          "type": "string",
          "required": true,
          "enum": [
            "SIGNER",
            "DELEGATE_TO_SIGNER",
            "APPROVER",
            "DELEGATE_TO_APPROVER",
            "ACCEPTOR",
            "DELEGATE_TO_ACCEPTOR",
            "FORM_FILLER",
            "DELEGATE_TO_FORM_FILLER",
            "CERTIFIED_RECIPIENT",
            "DELEGATE_TO_CERTIFIED_RECIPIENT"
          ]
        },
        "memberInfos": {
          "description": "Array of ParticipantInfo objects, containing participant-specific data (email, e.g.) for all the additional participants in the web form. If the email of the participant is unknown at the time of web form creation, the email should be left empty, ",
          "type": "array",
          "items": {
            "$ref": "ParticipantSetMemberInfo"
          },
          "required": true
        },
        "order": {
          "description": "Index indicating position at which signing group needs to sign. Additional participant to sign at first place is assigned a index of 1. Web Form participant should not have any order specified. Web Form participant should not have any email address and and can not have phone authentication applied. Different signingOrder specified in input should form a valid consecutive increasing sequence of integers. Otherwise signingOrder will be considered invalid,",
          "type": "integer",
          "required": false
        }
      }
    },
    "PageInfo": {
      "id": "PageInfo",
      "properties": {
        "nextCursor": {
          "description": "Used to navigate to the next page. If not returned, there are no further pages.",
          "type": "string",
          "required": true
        }
      }
    },
    "DisplayParticipantInfo": {
      "id": "DisplayParticipantInfo",
      "properties": {
        "fullName": {
          "description": "Displays the full name of the user, if available. ",
          "type": "string",
          "required": false
        },
        "company": {
          "description": "Displays the name of the company of the user, if available",
          "type": "string",
          "required": false
        },
        "email": {
          "description": "Displays the email of the user",
          "type": "string",
          "required": true
        }
      }
    },
    "CommonViewConfiguration": {
      "id": "CommonViewConfiguration",
      "properties": {
        "autoLoginUser": {
          "description": "Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false",
          "type": "boolean",
          "required": false
        },
        "noChrome": {
          "description": "No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false",
          "type": "boolean",
          "required": false
        },
        "locale": {
          "description": "Message template locale",
          "type": "string",
          "required": false
        }
      }
    },
    "DocumentImageUrlsInfo": {
      "id": "DocumentImageUrlsInfo",
      "properties": {
        "documentImageUrlsList": {
          "description": "A list of documents image URLs.",
          "type": "array",
          "items": {
            "$ref": "DocumentImageUrls"
          },
          "required": true
        },
        "documentId": {
          "description": "Id of the document",
          "type": "string",
          "required": true
        }
      }
    },
    "DocumentImageUrls": {
      "id": "DocumentImageUrls",
      "properties": {
        "imageURLs": {
          "description": "A list of image url (one per page).",
          "type": "array",
          "items": {
            "$ref": "PageImageUrl"
          },
          "required": true
        },
        "imagesAvailable": {
          "description": "true if images for the associated image size is available, else false.",
          "type": "boolean",
          "required": false
        },
        "imageSize": {
          "description": "ImageSize corresponding to the imageUrl returned ",
          "type": "string",
          "required": false,
          "enum": [
            "FIXED_WIDTH_50px",
            "FIXED_WIDTH_250px",
            "FIXED_WIDTH_675px",
            "ZOOM_50_PERCENT",
            "ZOOM_75_PERCENT",
            "ZOOM_100_PERCENT",
            "ZOOM_125_PERCENT",
            "ZOOM_150_PERCENT",
            "ZOOM_200_PERCENT"
          ]
        }
      }
    },
    "WidgetMembersInfo": {
      "id": "WidgetMembersInfo",
      "properties": {
        "ccsInfo": {
          "description": "Information of CC participants of the web form.",
          "type": "array",
          "items": {
            "$ref": "CCParticipantInfo"
          },
          "required": true
        },
        "additionalParticipantSets": {
          "description": "Information about the web form additional participant Sets",
          "type": "array",
          "items": {
            "$ref": "DetailedWidgetParticipantSetInfo"
          },
          "required": false
        },
        "widgetParticipantSet": {
          "description": "Information about the web form participant Set",
          "type": "DetailedWidgetParticipantSetInfo",
          "items": {
            "$ref": "DetailedWidgetParticipantSetInfo"
          },
          "required": false
        },
        "sharesInfo": {
          "description": "Information of the participants with whom the web form has been shared.",
          "type": "array",
          "items": {
            "$ref": "ShareParticipantInfo"
          },
          "required": true
        },
        "creatorInfo": {
          "description": "Information of the creator of the web form.",
          "type": "SenderInfo",
          "items": {
            "$ref": "SenderInfo"
          },
          "required": true
        }
      }
    },
    "URLFileInfo": {
      "id": "URLFileInfo",
      "properties": {
        "name": {
          "description": "The original system file name of the document being sent",
          "type": "string",
          "required": true
        },
        "mimeType": {
          "description": "The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed",
          "type": "string",
          "required": true
        },
        "url": {
          "description": "A publicly accessible URL for retrieving the raw file content",
          "type": "string",
          "required": true
        }
      }
    },
    "FetchedWidgetInfo": {
      "id": "WidgetInfo",
      "properties": {
        "additionalParticipantSetsInfo": {
          "description": "List of all the participants in the web form except web form signer",
          "type": "array",
          "items": {
            "$ref": "WidgetAdditionalParticipationSetInfo"
          },
          "required": false
        },
        "creatorEmail": {
          "description": "Email of web form creator. Only returned in GET response. Cannot be provided in POST/PUT request. If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false
        },
        "groupId": {
          "description": "The ID of the group to which the widget belongs to. If not provided during creation, primary group of the creator will be used",
          "type": "string",
          "required": false
        },
        "locale": {
          "description": "The locale associated with this web form - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the web form creator",
          "type": "string",
          "required": false
        },
        "vaultingInfo": {
          "description": "Vaulting properties that allows Adobe Sign to securely store documents with a vault provider",
          "type": "VaultingInfo",
          "items": {
            "$ref": "VaultingInfo"
          },
          "required": false
        },
        "securityOption": {
          "description": "Secondary security parameters for the web form",
          "type": "SecurityOption",
          "items": {
            "$ref": "SecurityOption"
          },
          "required": false
        },
        "widgetParticipantSetInfo": {
          "description": "Represents web form participant for whom email should not be provided",
          "type": "WidgetParticipantSetInfo",
          "items": {
            "$ref": "WidgetParticipantSetInfo"
          },
          "required": true
        },
        "widgetInActiveInfo": {
          "description": "The custom message which will be displayed to the user or the URL to which user will be redirected when the web form is accessed in a disabled state. This can only be specified in PUT request",
          "type": "WidgetInActiveInfo",
          "items": {
            "$ref": "WidgetInActiveInfo"
          },
          "required": false
        },
        "ccs": {
          "description": "A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email when the final agreement created through web form is signed. The email addresses will also receive a copy of the document, attached as a PDF file",
          "type": "array",
          "items": {
            "$ref": "WidgetCcInfo"
          },
          "required": false
        },
        "createdDate": {
          "format": "date",
          "description": "Date when web form was created. If provided in POST, it will simply be ignored. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "isDocumentRetentionApplied": {
          "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "lastEventDate": {
          "format": "date",
          "description": "The date of the last event that occurred for this web form.  Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "name": {
          "description": "The name of the web form that will be used to identify it, in emails, website and other places",
          "type": "string",
          "required": true
        },
        "completionInfo": {
          "description": "URL and associated properties for the success page the web form signer will be taken to after performing desired action on the web form",
          "type": "WidgetRedirectionInfo",
          "items": {
            "$ref": "WidgetRedirectionInfo"
          },
          "required": false
        },
        "authFailureInfo": {
          "description": "URL and associated properties for the error page the web form signer will be taken after failing to authenticate",
          "type": "WidgetRedirectionInfo",
          "items": {
            "$ref": "WidgetRedirectionInfo"
          },
          "required": false
        },
        "fileInfos": {
          "description": "A list of one or more files (or references to files) that will be used to create the web form. If more than one file is provided, they will be combined before the web form is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified",
          "type": "array",
          "items": {
            "$ref": "FileInfo"
          },
          "required": false
        },
        "id": {
          "description": "A resource identifier that can be used to uniquely identify the web form in other apis. If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false
        },
        "state": {
          "description": "The state in which the web form should land. For example in order to create a web form in DRAFT state, field should be DRAFT. The state field will never get returned in GET /widgets/{ID} and will be ignored if provided in PUT /widgets/{ID} call. The eventual status of the web form can be obtained from GET /widgets/ID",
          "type": "string",
          "required": false,
          "enum": [
            "DRAFT",
            "ACTIVE",
            "AUTHORING"
          ]
        },
        "status": {
          "description": "Status of the Web Form. If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false,
          "enum": [
            "DRAFT",
            "AUTHORING",
            "ACTIVE",
            "DOCUMENTS_NOT_YET_PROCESSED",
            "DISABLED",
            "DISCARDED"
          ]
        }
      }
    }
  },
  "apiVersion": "6.0.0",
  "swaggerVersion": "1.2",
  "basePath": "https://secure.au1.echosign.com/api/rest/v6",
  "apis": [
    {
      "path": "/widgets",
      "operations": [
        {
          "summary": "Creates a web form and and returns the widgetId in the response to the client.",
          "notes": "This is a primary endpoint which is used to create a new web form. You can create a web form in one of the 3 mentioned states: a) <b>DRAFT</b> - to incrementally build the web form, b) <b>AUTHORING</b> - to add/edit form fields in the web form, c) <b>ACTIVE</b> - to immediately host the web form. You can use the PUT /widgets/{widgetId}/state endpoint to transition a web form between the above mentioned states. An allowed transition would follow the any of the following sequences: DRAFT->AUTHORING->ACTIVE, ACTIVE<->INACTIVE, DRAFT->CANCELLED.",
          "nickname": "createWidget",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ARGUMENTS: One or more arguments to the method are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_EMAIL: Email provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_FILE_INFO: Invalid or no file info is provided.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ORDER: Order of participant sets define an invalid range.",
              "code": "400"
            },
            {
              "reason": "INVALID_PARTICIPANT_ROLE: Role provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_REDIRECT_DELAY: The redirectDelay specified in PostSignOptions must be nonnegative integer.",
              "code": "400"
            },
            {
              "reason": "INVALID_REDIRECT_URL: The redirectUrl specified in PostSignOptions is not a valid URL.",
              "code": "400"
            },
            {
              "reason": "MAX_MESSAGE_LENGTH_LIMIT_EXCEEDED: The description should not be greater than 240 characters.",
              "code": "400"
            },
            {
              "reason": "MAX_UNKNOWN_PARTICIPANTS_EXCEEDED: More than one unknown participants are not allowed.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "AUTOLOGIN_DENIED: User settings do not permit autologin as requested.",
              "code": "401"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NOT_AUTHORIZED_FOR_TRANSIENT_RESOURCE: Not authorized for the transient resource referred in the request.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "UNAUTHORIZED: You cannot work on behalf of this user.",
              "code": "401"
            },
            {
              "reason": "UNVERIFIED_USER: The user has registered but has not verified their email address. The user must use the Adobe Sign web site to complete verification.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "KBA_LIMIT_EXCEEDED: KBA limit for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "PHONE_AUTH_LIMIT_EXCEEDED: Phone usage limit for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "SEND_LIMIT_EXCEEDED: Agreement creation quota of the user is exhausted.",
              "code": "403"
            },
            {
              "reason": "INVALID_PARTICIPANT_MEMBER_INFO: The participant member info specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_TRANSIENTDOCUMENT_ID: The Transient Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "TRANSIENT_RESOURCE_DELETED: Transient Resource deleted from the server.",
              "code": "404"
            },
            {
              "reason": "INVALID_GROUP_ID_FOR_USER: Specified group is invalid or user is not a member.",
              "code": "405"
            },
            {
              "reason": "UNSUPPORTED_MEDIA_TYPE: Content type was not provided or is not supported.",
              "code": "415"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "POST",
          "type": "WidgetCreationResponse",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_write')\" oncontextmenu=\"this.href=oauthDoc('widget_write')\" target=\"oauthDoc\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "body",
              "name": "WidgetInfo",
              "description": "Information about the web form that you want to create.",
              "type": "WidgetCreationInfoV6",
              "required": true
            }
          ],
          "order": 138
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/members/share",
      "operations": [
        {
          "summary": "Share a web form with someone.",
          "notes": null,
          "nickname": "createShareOnWidget",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_EMAIL: Email provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "SHAREE_ALREADY_PARTICIPATING: One or more sharees is already a participant and cannot be shared with.",
              "code": "400"
            },
            {
              "reason": "WIDGET_SHARING_MAX_SHAREES_EXCEEDED: Web Forms can be shared with at most %s sharees at a time.",
              "code": "400"
            },
            {
              "reason": "WIDGET_SHARING_MAX_SHAREE_EXCEEDED: Web Forms can be shared with at most 1 sharee at a time.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "NO_ACCESS_TOKEN_HEADER: Access token header not provided.",
              "code": "401"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "WIDGET_SHARING_DISABLED: Web Form sharing is not enabled for your account.",
              "code": "403"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "WIDGET_DELETED: The web form has been deleted.",
              "code": "404"
            },
            {
              "reason": "WIDGET_NOT_AVAILABLE: The web form document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "POST",
          "type": "ShareCreationResponseList",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_write')\" oncontextmenu=\"this.href=oauthDoc('widget_write')\" target=\"oauthDoc\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "ShareCreationInfoList",
              "description": "List of agreement share creation information objects.",
              "type": "ShareCreationInfoList",
              "required": true
            }
          ],
          "order": 139
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/views",
      "operations": [
        {
          "summary": "Retrieves the requested views for a web form.",
          "notes": null,
          "nickname": "getWidgetView",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read",
                "description": "web form read is always required"
              },
              {
                "scope": "user_login",
                "description": "Required additionally if the autoLoginUser parameter is set to true"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_EMAIL: Email provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_PERSONALIZED_VIEW_EXPIRATION_DATE: You must set a future date for personalized view expiration.",
              "code": "400"
            },
            {
              "reason": "INVALID_VIEW_CONFIGURATION: Invalid view configuration provided.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "VIEW_NOT_AVAILABLE: Requested view is not available for the resource in the current state.",
              "code": "400"
            },
            {
              "reason": "AUTOLOGIN_DENIED: User settings do not permit autologin as requested.",
              "code": "401"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "POST",
          "type": "WidgetViews",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a> - web form read is always required</li><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('user_login')\" oncontextmenu=\"this.href=oauthDoc('user_login')\" target=\"oauthDoc\">user_login</a> - Required additionally if the autoLoginUser parameter is set to true</li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "WidgetViewInfo",
              "description": "Name of the required view and its desired configuration.",
              "type": "WidgetViewInfo",
              "required": true
            }
          ],
          "order": 140
        }
      ]
    },
    {
      "path": "/widgets",
      "operations": [
        {
          "summary": "Retrieves web forms for a user.",
          "notes": null,
          "nickname": "getWidgets",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_CURSOR: Page cursor provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_PAGE_SIZE: Page size is either invalid or not within permissible range.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_GROUP_ID_FOR_USER: Specified group is invalid or user is not a member.",
              "code": "405"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "UserWidgets",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "groupId",
              "description": "The group identifier, as returned by the group creation API or retrieved from the API to fetch groups.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "showHiddenWidgets",
              "description": "A query parameter to fetch all the hidden web forms along with the visible web forms. Default value is false.",
              "type": "boolean",
              "required": false
            },
            {
              "paramType": "query",
              "name": "cursor",
              "description": "Used to navigate through the pages. If not provided, returns the first page.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "pageSize",
              "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
              "type": "integer",
              "required": false
            }
          ],
          "order": 141
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}",
      "operations": [
        {
          "summary": "Retrieves the details of a web form.",
          "notes": null,
          "nickname": "getWidgetInfo",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "FetchedWidgetInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            }
          ],
          "order": 142
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/agreements",
      "operations": [
        {
          "summary": "Retrieves agreements for the web form.",
          "notes": null,
          "nickname": "getWidgetAgreements",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_CURSOR: Page cursor provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_PAGE_SIZE: Page size is either invalid or not within permissible range.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "WidgetAgreements",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "showHiddenAgreements",
              "description": "A query parameter to fetch all the hidden agreements along with the visible agreements. Default value is false.",
              "type": "boolean",
              "required": false
            },
            {
              "paramType": "query",
              "name": "cursor",
              "description": "Used to navigate through the pages. If not provided, returns the first page.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "pageSize",
              "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
              "type": "integer",
              "required": false
            }
          ],
          "order": 143
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/auditTrail",
      "operations": [
        {
          "summary": "Retrieves the audit trail of a web form identified by widgetId.",
          "notes": null,
          "format": "byte",
          "nickname": "getWidgetAuditTrail",
          "produces": [
            "application/pdf",
            "application/pdf;encoding=base64"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            }
          ],
          "order": 145
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/combinedDocument",
      "operations": [
        {
          "summary": "Retrieves a single combined PDF document for the documents associated with a web form.",
          "notes": null,
          "format": "byte",
          "nickname": "getWidgetCombinedDocument",
          "produces": [
            "application/pdf",
            "application/pdf;encoding=base64"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_ID: The participant ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_VERSION_ID: The Version ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "versionId",
              "description": "The version identifier of web form as provided by the API which retrieves information of a specific web form. If not provided then latest version will be used.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "participantId",
              "description": "The ID of the participant to be used to retrieve documents. If not mentioned, the participation of api caller is used.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "attachAuditReport",
              "description": "When set to YES, attach an audit report to the signed Web Form PDF. Default value is false",
              "type": "boolean",
              "required": false
            }
          ],
          "order": 147
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/combinedDocument/url",
      "operations": [
        {
          "summary": "Retrieves url of all visible pages of all the documents associated with a web form.",
          "notes": null,
          "nickname": "getWidgetCombinedDocumentUrl",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "DOCUMENTS_REMOVED: The documents have already been removed.",
              "code": "404"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_ID: The participant ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_VERSION_ID: The Version ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "DocumentUrl",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "attachAuditReport",
              "description": "When set to true, attach an audit report to the web form PDF. The default value is false.",
              "type": "boolean",
              "required": false
            }
          ],
          "order": 148
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/documents",
      "operations": [
        {
          "summary": "Retrieves the IDs of the documents associated with web form.",
          "notes": null,
          "nickname": "getWidgetDocuments",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "DOCUMENT_ORIGINAL_FORMAT_NOT_ALLOWED: The documents in original format are not enabled for this user.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_ID: The participant ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_VERSION_ID: The Version ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "WIDGET_NOT_AVAILABLE: The web form document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "WidgetDocuments",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "versionId",
              "description": "The version identifier of web form as provided by the API which retrieves information of a specific web form. If not provided then latest version will be used.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "participantId",
              "description": "The ID of the participant to be used to retrieve documents. If not mentioned, the participation of api caller is used.",
              "type": "string",
              "required": false
            }
          ],
          "order": 149
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/documents/{documentId}",
      "operations": [
        {
          "summary": "Retrieves the file stream of a document of a web form.",
          "notes": null,
          "format": "byte",
          "nickname": "getWidgetDocumentInfo",
          "produces": [
            "application/pdf",
            "application/pdf;encoding=base64"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_DOCUMENT_ID: The Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "WIDGET_NOT_AVAILABLE: The web form document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "documentId",
              "description": "The document identifier, as retrieved from the API which fetches the documents of a specified web form",
              "type": "string",
              "required": true
            }
          ],
          "order": 152
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/events",
      "operations": [
        {
          "summary": "Retrieves the events information for a web form.",
          "notes": null,
          "nickname": "getEvents",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "WidgetEventList",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            }
          ],
          "order": 153
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/documents/imageUrls",
      "operations": [
        {
          "summary": "Retrieves image urls of all visible pages of a document associated with a web form.",
          "notes": null,
          "nickname": "getWidgetAllDocumentsImageUrls",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ARGUMENTS: One or more arguments to the method are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "WIDGET_NOT_AVAILABLE: The web form document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "BasicDocumentsImageUrlsInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "imageSizes",
              "description": "A comma separated list of image sizes i.e. {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}. Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT}. ",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "showImageAvailabilityOnly",
              "description": "When set to true, returns only image availability. Else, returns both image urls and its availability.",
              "type": "boolean",
              "required": false
            }
          ],
          "order": 154
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/formData",
      "operations": [
        {
          "summary": "Retrieves data entered by the user into interactive form fields at the time they signed the web form",
          "notes": "CSV file stream containing form data information",
          "format": "byte",
          "nickname": "getWidgetFormData",
          "produces": [
            "text/csv"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "NO_FORM_DATA: There is no form data available.",
              "code": "404"
            },
            {
              "reason": "WIDGET_NOT_AVAILABLE: The web form document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            }
          ],
          "order": 155
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/me/note",
      "operations": [
        {
          "summary": "Retrieves the latest note of a web form for the API user.",
          "notes": null,
          "nickname": "getWidgetNoteForApiUser",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "Note",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            }
          ],
          "order": 156
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/members",
      "operations": [
        {
          "summary": "Retrieves detailed member info along with IDs for different types of participants.",
          "notes": null,
          "nickname": "getAllWidgetMembers",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "WidgetMembersInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            }
          ],
          "order": 157
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/members/participantSets/{participantSetId}",
      "operations": [
        {
          "summary": "Retrieves the participant set of a web form identified by widgetId in the path.",
          "notes": null,
          "nickname": "getParticipantSet",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "OPERATION_NOT_ALLOWED: Requested Operation is not allowed.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "INVALID_PARTICIPANT_SET_ID: The participant set ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "WIDGET_NOT_AVAILABLE: The web form document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "DetailedWidgetParticipantSetInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantSetId",
              "description": "The participant set identifier",
              "type": "string",
              "required": true
            }
          ],
          "order": 158
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/members/participantSets/{participantSetId}/participants/{participantId}/securityOptions",
      "operations": [
        {
          "summary": "Retrieves the security options for a particular participant.",
          "notes": null,
          "nickname": "getWidgetSecurityOptionsForParticipation",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "NO_ACCESS_TOKEN_HEADER: Access token header not provided.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "INVALID_PARTICIPANT_ID: The participant ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_SET_ID: The participant set ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "ParticipantSecurityOption",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantSetId",
              "description": "The participant set identifier",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantId",
              "description": "The participant identifier",
              "type": "string",
              "required": true
            }
          ],
          "order": 159
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/me",
      "operations": [
        {
          "summary": "Retrieves the web form information related to the api caller",
          "notes": null,
          "nickname": "getWidgetInfoForUser",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "MyAgreementInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_read')\" oncontextmenu=\"this.href=oauthDoc('widget_read')\" target=\"oauthDoc\">widget_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            }
          ],
          "order": 160
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}",
      "operations": [
        {
          "summary": "Updates a web form.",
          "notes": null,
          "nickname": "updateWidget",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ARGUMENTS: One or more arguments to the method are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_FILE_INFO: Invalid or no file info is provided.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_REDIRECT_URL: The redirectUrl specified in PostSignOptions is not a valid URL.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "MUST_PROVIDE_VALID_WIDGET_STATUS: Must provide a valid web form status.",
              "code": "400"
            },
            {
              "reason": "NO_ACTION_SPECIFIED: Either a redirectUrl or a message is required.",
              "code": "400"
            },
            {
              "reason": "TOO_MANY_ACTIONS_SPECIFIED: Cannot specify both a redirectUrl and a message.",
              "code": "400"
            },
            {
              "reason": "UPDATE_NOT_ALLOWED: The agreement you are trying to update is not modifiable.",
              "code": "400"
            },
            {
              "reason": "URL_INVALID: Provided document URL is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NOT_AUTHORIZED_FOR_TRANSIENT_RESOURCE: Not authorized for the transient resource referred in the request.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "UNAUTHORIZED: You cannot work on behalf of this user.",
              "code": "401"
            },
            {
              "reason": "UNVERIFIED_USER: The user has registered but has not verified their email address. The user must use the Adobe Sign web site to complete verification.",
              "code": "401"
            },
            {
              "reason": "INVALID_DOCUMENT_ID: The Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_TRANSIENTDOCUMENT_ID: The Transient Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "TRANSIENT_RESOURCE_DELETED: Transient Resource deleted from the server.",
              "code": "404"
            },
            {
              "reason": "WIDGET_NOT_AVAILABLE: The web form document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "WIDGET_NOT_MODIFIED: The web form has not been modified.",
              "code": "412"
            },
            {
              "reason": "UNSUPPORTED_MEDIA_TYPE: Content type was not provided or is not supported.",
              "code": "415"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_write')\" oncontextmenu=\"this.href=oauthDoc('widget_write')\" target=\"oauthDoc\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "WidgetInfo",
              "description": "Web Form update information object.",
              "type": "WidgetInfo",
              "required": true
            }
          ],
          "order": 161
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/me/visibility",
      "operations": [
        {
          "summary": "Updates the visibility of web form.",
          "notes": null,
          "nickname": "updateWidgetVisibility",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_PARTICIPANT_ID: The participant ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_SET_ID: The participant set ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "WIDGET_NOT_AVAILABLE: The web form document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_write')\" oncontextmenu=\"this.href=oauthDoc('widget_write')\" target=\"oauthDoc\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "VisibilityInfo",
              "description": "Information to update visibility of web form",
              "type": "VisibilityInfo",
              "required": true
            }
          ],
          "order": 163
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/state",
      "operations": [
        {
          "summary": "Updates the state of a web form identified by widgetId in the path.",
          "notes": "This endpoint can be used by creator of the web form to transition between the states of web form. An allowed transition would follow any of the following sequence :  DRAFT->AUTHORING->ACTIVE, ACTIVE<->INACTIVE, DRAFT->CANCELLED.",
          "nickname": "updateWidgetState",
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ARGUMENTS: One or more arguments to the method are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "KBA_LIMIT_EXCEEDED: KBA limit for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "PHONE_AUTH_LIMIT_EXCEEDED: Phone usage limit for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "SEND_LIMIT_EXCEEDED: Agreement creation quota of the user is exhausted.",
              "code": "403"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "RESOURCE_MODIFIED: Resource is already modified with newer version.",
              "code": "412"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_write')\" oncontextmenu=\"this.href=oauthDoc('widget_write')\" target=\"oauthDoc\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "WidgetStateInfo",
              "description": "",
              "type": "WidgetStateInfo",
              "required": true
            }
          ],
          "order": 165
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/me/note",
      "operations": [
        {
          "summary": "Updates the latest note of a web form for the API user.",
          "notes": null,
          "nickname": "updateWidgetNoteForApiUser",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_write')\" oncontextmenu=\"this.href=oauthDoc('widget_write')\" target=\"oauthDoc\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "Note",
              "description": "The note to be associated with the web form.",
              "type": "Note",
              "required": true
            }
          ],
          "order": 166
        }
      ]
    },
    {
      "path": "/widgets/{widgetId}/members/participantSets/{participantSetId}/participants/{participantId}/securityOptions",
      "operations": [
        {
          "summary": "Updates the security options for a particular participant.",
          "notes": null,
          "nickname": "updateWidgetSecurityOptionsForParticipation",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "widget_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_COUNTRY_CODE: Country code provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_PASSWORD: Password provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_PHONE: Phone number provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_ACCESS_TOKEN_HEADER: Access token header not provided.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "INVALID_SIGNER_AUTH: Signer identity verification method specified is not allowed by account settings.",
              "code": "403"
            },
            {
              "reason": "KBA_LIMIT_EXCEEDED: KBA limit for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "PHONE_AUTH_LIMIT_EXCEEDED: Phone usage limit for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "WIDGET_IN_DRAFT_STATE: The web form is in draft state.",
              "code": "403"
            },
            {
              "reason": "INVALID_PARTICIPANT_ID: The participant ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_PARTICIPANT_SET_ID: The participant set ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_WIDGET_ID: The Web Form ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "RESOURCE_MODIFIED: Resource is already modified with newer version.",
              "code": "412"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('widget_write')\" oncontextmenu=\"this.href=oauthDoc('widget_write')\" target=\"oauthDoc\">widget_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "widgetId",
              "description": "The web form identifier, as returned by the web form creation API or retrieved from the API to fetch web forms.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantSetId",
              "description": "The participant set identifier",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "participantId",
              "description": "The participant identifier",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "ParticipantSecurityOption",
              "description": "Security options that apply to the participant",
              "type": "ParticipantSecurityOption",
              "required": true
            }
          ],
          "order": 167
        }
      ]
    }
  ],
  "resourcePath": "/widgets",
  "produces": [
    "application/json",
    "text/csv"
  ]
}
