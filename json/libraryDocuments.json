{
  "models": {
    "LibraryDocuments": {
      "id": "LibraryDocuments",
      "properties": {
        "libraryDocumentList": {
          "description": "An array of document library items",
          "type": "array",
          "items": {
            "$ref": "LibraryDocument"
          },
          "required": true
        },
        "page": {
          "description": "Pagination information for navigating through the response",
          "type": "PageInfo",
          "items": {
            "$ref": "PageInfo"
          },
          "required": true
        }
      }
    },
    "LibraryDocumentEvent": {
      "id": "Event",
      "properties": {
        "date": {
          "format": "date",
          "description": "The date of the audit event. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": true
        },
        "initiatingUserName": {
          "description": "Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
          "type": "string",
          "required": true
        },
        "description": {
          "description": "A description of the audit event",
          "type": "string",
          "required": true
        },
        "actingUserName": {
          "description": "The name of the acting user",
          "type": "string",
          "required": true
        },
        "actingUserIpAddress": {
          "description": "The IP address of the user that created the event",
          "type": "string",
          "required": true
        },
        "participantEmail": {
          "description": "Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
          "type": "string",
          "required": true
        },
        "type": {
          "description": "Type of library document event",
          "type": "string",
          "required": true,
          "enum": [
            "AUTO_CANCELLED_CONVERSION_PROBLEM",
            "CREATED",
            "MODIFIED",
            "DOCUMENTS_DELETED"
          ]
        },
        "participantRole": {
          "description": "Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).",
          "type": "string",
          "required": true,
          "enum": [
            "SIGNER",
            "DELEGATE_TO_SIGNER",
            "APPROVER",
            "DELEGATE_TO_APPROVER",
            "ACCEPTOR",
            "DELEGATE_TO_ACCEPTOR",
            "FORM_FILLER",
            "DELEGATE_TO_FORM_FILLER",
            "CERTIFIED_RECIPIENT",
            "DELEGATE_TO_CERTIFIED_RECIPIENT",
            "SHARE",
            "SENDER"
          ]
        },
        "vaultEventId": {
          "description": "The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)",
          "type": "string",
          "required": true
        },
        "participantId": {
          "description": "The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
          "type": "string",
          "required": true
        },
        "versionId": {
          "description": "An ID which uniquely identifies the version of the document associated with this audit event",
          "type": "string",
          "required": true
        },
        "actingUserEmail": {
          "description": "Email address of the user that created the event",
          "type": "string",
          "required": true
        },
        "devicePhoneNumber": {
          "description": "Phone number from the device used when the participation is completed on a mobile phone",
          "type": "string",
          "required": true
        },
        "initiatingUserEmail": {
          "description": "Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
          "type": "string",
          "required": true
        },
        "digitalSignatureInfo": {
          "description": "This is present for ESIGNED events when the participation is signed digitally",
          "type": "DigitalSignatureInfo",
          "items": {
            "$ref": "DigitalSignatureInfo"
          },
          "required": true
        },
        "vaultProviderName": {
          "description": "Name of the vault provider for the vault event (if vaulted, otherwise null)",
          "type": "string",
          "required": true
        },
        "comment": {
          "description": "The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant",
          "type": "string",
          "required": false
        },
        "id": {
          "description": "The identifier for the event.",
          "type": "string",
          "required": false
        },
        "synchronizationId": {
          "description": "A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)",
          "type": "string",
          "required": true
        },
        "deviceLocation": {
          "description": "Location of the device that generated the event (This value may be null due to limited privileges)",
          "type": "LibDocEventDeviceLocation",
          "items": {
            "$ref": "LibDocEventDeviceLocation"
          },
          "required": true
        }
      }
    },
    "Document": {
      "id": "Document",
      "properties": {
        "numPages": {
          "description": "Number of pages in the document",
          "type": "integer",
          "required": true
        },
        "createdDate": {
          "description": "The date the document was created",
          "type": "date",
          "required": true
        },
        "name": {
          "description": "Name of the original document uploaded. This is returned in GET but not accepted back in PUT",
          "type": "string",
          "required": false
        },
        "id": {
          "description": "ID of the document. In case of PUT call, this is the only field that is accepted in Document structure. Name and mimeType are ignored in case of PUT call",
          "type": "string",
          "required": true
        },
        "label": {
          "description": "Label of the document",
          "type": "string",
          "required": true
        },
        "mimeType": {
          "description": "mimeType of the original file. This is returned in GET but not accepted back in PUT",
          "type": "string",
          "required": false
        }
      }
    },
    "SendViewConfiguration": {
      "id": "SendViewConfiguration",
      "properties": {
        "fileUploadOptions": {
          "description": "Controls various file upload options available on the compose page",
          "type": "FileUploadOptions",
          "items": {
            "$ref": "FileUploadOptions"
          },
          "required": false
        },
        "isPreviewSelected": {
          "description": "Should the compose page be provided with authoring mode selected?",
          "type": "boolean",
          "required": false
        },
        "agrName": {
          "description": "The agreement name for the library document on the compose page",
          "type": "string",
          "required": true
        }
      }
    },
    "LibraryDocumentCreationResponse": {
      "description": "A JSON object describing the library template",
      "id": "LibraryDocumentCreationResponse",
      "properties": {
        "id": {
          "description": "The unique identifier that is used to refer to the library template",
          "type": "string",
          "required": true
        }
      }
    },
    "FileInfo": {
      "id": "FileInfo",
      "properties": {
        "transientDocumentId": {
          "description": "ID for a transient document that will be added to the library document",
          "showInSampleRequest": true,
          "type": "string",
          "required": false
        },
        "urlFileInfo": {
          "description": "URL for an external document to add to the library document",
          "type": "URLFileInfo",
          "items": {
            "$ref": "URLFileInfo"
          },
          "required": false
        }
      }
    },
    "LibraryDocumentCreationInfoV6": {
      "id": "LibraryDocumentInfo",
      "properties": {
        "creatorEmail": {
          "description": "Email address of the library document creator. It will be ignored in POST/PUT requests",
          "type": "string",
          "required": false
        },
        "sharingMode": {
          "description": "Specifies who should have access to this library document. GLOBAL sharing is a restricted operation.",
          "type": "string",
          "required": true,
          "enum": [
            "USER",
            "GROUP",
            "ACCOUNT",
            "GLOBAL"
          ]
        },
        "groupId": {
          "description": "The unique identifier of the group to which the library template belongs to. If not provided during creation, primary group of the creator will be used",
          "type": "string",
          "required": false
        },
        "creatorName": {
          "description": "Name of the library document creator.  It will be ignored in POST/PUT requests",
          "type": "string",
          "required": false
        },
        "createdDate": {
          "format": "date",
          "description": "Date when library document was created. It will be ignored in POST/PUT requests. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "isDocumentRetentionApplied": {
          "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "templateTypes": {
          "description": "A list of one or more library template types",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DOCUMENT",
              "FORM_FIELD_LAYER"
            ]
          },
          "required": true
        },
        "lastEventDate": {
          "format": "date",
          "description": "The date of the last event that occurred for this library document",
          "type": "string",
          "required": false
        },
        "modifiedDate": {
          "format": "date",
          "description": "Date when library document was last modified. It will be ignored in POST/PUT requests. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "name": {
          "description": "The name of the library template that will be used to identify it, in emails and on the website",
          "type": "string",
          "required": true
        },
        "fileInfos": {
          "description": "A list of one or more files (or references to files) that will be used to create the template. If more than one file is provided, they will be combined into one PDF. Note: Only a single parameter in every FileInfo object must be specified",
          "type": "array",
          "items": {
            "$ref": "FileInfo"
          },
          "required": true
        },
        "id": {
          "description": "The unique identifier that is used to refer to the library template. It will be ignored in POST requests",
          "type": "string",
          "required": false
        },
        "state": {
          "description": "State of the library document.",
          "type": "string",
          "required": true,
          "enum": [
            "AUTHORING",
            "ACTIVE"
          ]
        },
        "status": {
          "description": "Status of the library document",
          "type": "string",
          "required": false,
          "enum": [
            "AUTHORING",
            "ACTIVE",
            "REMOVED"
          ]
        }
      }
    },
    "LibraryDocumentInfo": {
      "id": "LibraryDocumentInfo",
      "properties": {
        "creatorEmail": {
          "description": "Email address of the library document creator. It will be ignored in POST/PUT requests",
          "type": "string",
          "required": false
        },
        "sharingMode": {
          "description": "Specifies who should have access to this library document. GLOBAL sharing is a restricted operation.",
          "type": "string",
          "required": true,
          "enum": [
            "USER",
            "GROUP",
            "ACCOUNT",
            "GLOBAL"
          ]
        },
        "groupId": {
          "description": "The unique identifier of the group to which the library template belongs to. If not provided during creation, primary group of the creator will be used",
          "type": "string",
          "required": false
        },
        "creatorName": {
          "description": "Name of the library document creator.  It will be ignored in POST/PUT requests",
          "type": "string",
          "required": false
        },
        "createdDate": {
          "format": "date",
          "description": "Date when library document was created. It will be ignored in POST/PUT requests. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "isDocumentRetentionApplied": {
          "description": "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.",
          "type": "boolean",
          "required": false
        },
        "templateTypes": {
          "description": "A list of one or more library template types",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DOCUMENT",
              "FORM_FIELD_LAYER"
            ]
          },
          "required": true
        },
        "lastEventDate": {
          "format": "date",
          "description": "The date of the last event that occurred for this library document",
          "type": "string",
          "required": false
        },
        "modifiedDate": {
          "format": "date",
          "description": "Date when library document was last modified. It will be ignored in POST/PUT requests. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "name": {
          "description": "The name of the library template that will be used to identify it, in emails and on the website",
          "type": "string",
          "required": true
        },
        "fileInfos": {
          "description": "A list of one or more files (or references to files) that will be used to create the template. If more than one file is provided, they will be combined into one PDF. Note: Only a single parameter in every FileInfo object must be specified",
          "type": "array",
          "items": {
            "$ref": "FileInfo"
          },
          "required": true
        },
        "id": {
          "description": "The unique identifier that is used to refer to the library template. It will be ignored in POST requests",
          "type": "string",
          "required": false
        },
        "state": {
          "description": "State of the library document.",
          "type": "string",
          "required": false,
          "enum": [
            "AUTHORING",
            "ACTIVE"
          ]
        },
        "status": {
          "description": "Status of the library document",
          "type": "string",
          "required": true,
          "enum": [
            "AUTHORING",
            "ACTIVE",
            "REMOVED"
          ]
        }
      }
    },
    "FormFieldConditionPredicate": {
      "description": "A predicate used to determine whether the condtion succeeds",
      "id": "FormFieldConditionPredicate",
      "properties": {
        "fieldName": {
          "description": "Name of the field whose value is the basis of predicate",
          "type": "string",
          "required": false
        },
        "value": {
          "description": "Value to compare against the value of the predicate's form field, using the specified operator",
          "type": "string",
          "required": false
        },
        "operator": {
          "description": "Operator to be applied on the value of the predicate field.",
          "type": "string",
          "required": false,
          "enum": [
            "EQUALS",
            "NOT_EQUALS",
            "LESS_THAN",
            "LESS_THAN_EQUALS",
            "GREATER_THAN",
            "GREATER_THAN_EQUALS",
            "IN",
            "NOT_IN",
            "CONTAINS",
            "NOT_CONTAINS"
          ]
        },
        "fieldLocationIndex": {
          "description": "Index of the location of the form field used in the predicate",
          "type": "integer",
          "required": false
        }
      }
    },
    "FormFieldHyperlink": {
      "description": "Hyperlink-specific data for hyperlink form fields",
      "id": "FormFieldHyperlink",
      "properties": {
        "linkType": {
          "description": "Type of link in an agreement.",
          "type": "string",
          "required": false,
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "FROM_TEXT"
          ]
        },
        "documentLocation": {
          "description": "Location on the document pointed by the link in case of INTERNAL type link",
          "type": "FormFieldLocation",
          "items": {
            "$ref": "FormFieldLocation"
          },
          "required": false
        },
        "url": {
          "description": "URL, in case of EXTERNAL type link",
          "type": "string",
          "required": false
        }
      }
    },
    "LibDocEventDeviceLocation": {
      "id": "LibDocEventDeviceLocation",
      "properties": {
        "latitude": {
          "description": "Latitude coordinate",
          "type": "float",
          "required": true
        },
        "longitude": {
          "description": "Longitude coordinate",
          "type": "float",
          "required": true
        }
      }
    },
    "LibraryDocument": {
      "id": "LibraryDocument",
      "properties": {
        "templateTypes": {
          "description": "A list of one or more library template types",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DOCUMENT",
              "FORM_FIELD_LAYER"
            ]
          },
          "required": true
        },
        "hidden": {
          "description": "True if Library Document is hidden",
          "type": "boolean",
          "required": true
        },
        "creatorEmail": {
          "description": "Email address of the library document creator. It will be ignored in POST/PUT requests",
          "type": "string",
          "required": false
        },
        "sharingMode": {
          "description": "Specifies who should have access to this library document. GLOBAL sharing is a restricted operation.",
          "type": "string",
          "required": true,
          "enum": [
            "USER",
            "GROUP",
            "ACCOUNT",
            "GLOBAL"
          ]
        },
        "groupId": {
          "description": "The unique identifier of the group to which the library template belongs to. If not provided during creation, primary group of the creator will be used",
          "type": "string",
          "required": false
        },
        "modifiedDate": {
          "format": "date",
          "description": "The date on which the library document was last modified. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": true
        },
        "name": {
          "description": "The name of the library document",
          "type": "string",
          "required": true
        },
        "id": {
          "description": "The unique identifier that is used to refer to the library template",
          "type": "string",
          "required": true
        },
        "status": {
          "description": "Status of the library document",
          "type": "string",
          "required": false,
          "enum": [
            "AUTHORING",
            "ACTIVE",
            "REMOVED"
          ]
        }
      }
    },
    "FormField": {
      "description": "A form field for an agreement.",
      "id": "FormField",
      "properties": {
        "radioCheckType": {
          "description": "The type of radio button (if field is radio button, identified by inputType).",
          "type": "string",
          "required": false,
          "enum": [
            "CIRCLE",
            "CHECK",
            "CROSS",
            "DIAMOND",
            "SQUARE",
            "STAR"
          ]
        },
        "borderColor": {
          "description": "Color of the border of the field in RGB or HEX format",
          "type": "string",
          "required": false
        },
        "valueExpression": {
          "description": "Expression to calculate value of the form field",
          "type": "string",
          "required": false
        },
        "maskingText": {
          "description": "Text to mask the masked form field",
          "type": "string",
          "required": false
        },
        "defaultValue": {
          "description": "Default value of the form field",
          "type": "string",
          "required": false
        },
        "masked": {
          "description": "true if the input entered by the signer has to be masked (like password), false if it shouldn't be",
          "type": "boolean",
          "required": false
        },
        "minLength": {
          "description": "Minimum length of the input text field in terms of no. of characters",
          "type": "integer",
          "required": false
        },
        "origin": {
          "description": "Origin of Form Field",
          "type": "string",
          "required": false,
          "enum": [
            "AUTHORED",
            "GENERATED",
            "IMPORTED"
          ]
        },
        "tooltip": {
          "description": "Text that appears while hovering over the field",
          "type": "string",
          "required": false
        },
        "hiddenOptions": {
          "description": "Text values which are hidden in a drop down form field",
          "type": "array",
          "items": {
            "$ref": "string"
          },
          "required": false
        },
        "required": {
          "description": "true if it is a mandatory field to be filled by the signer, else false",
          "type": "boolean",
          "required": false
        },
        "validationData": {
          "description": "Further data for validating input with regards to the field's specified format. The contents and interpretation of formatData depends on the value of validation.",
          "type": "string",
          "required": false
        },
        "minValue": {
          "format": "double",
          "description": "Lower bound of the number that can be entered by the signer",
          "type": "number",
          "required": false
        },
        "borderWidth": {
          "format": "double",
          "description": "Width of the border of the field in pixels",
          "type": "number",
          "required": false
        },
        "urlOverridable": {
          "description": "For web form text fields only - true if the default value may come from the URL, else false",
          "type": "boolean",
          "required": false
        },
        "inputType": {
          "description": "Input type of the form field",
          "type": "string",
          "required": false,
          "enum": [
            "TEXT_FIELD",
            "MULTILINE",
            "PASSWORD",
            "RADIO",
            "CHECKBOX",
            "DROP_DOWN",
            "LISTBOX",
            "SIGNATURE",
            "PDF_SIGNATURE",
            "BUTTON",
            "BLOCK",
            "FILE_CHOOSER",
            "COMB",
            "INLINE_IMAGE",
            "UNSUPPORTED"
          ]
        },
        "borderStyle": {
          "description": "Style of the border of the field.",
          "type": "string",
          "required": false,
          "enum": [
            "SOLID",
            "DASHED",
            "BEVELED",
            "INSET",
            "UNDERLINE"
          ]
        },
        "calculated": {
          "description": "true if this field's value is calculated from an expression, else false",
          "type": "boolean",
          "required": false
        },
        "contentType": {
          "description": "Content Type of the form field.",
          "type": "string",
          "required": false,
          "enum": [
            "DATA",
            "SIGNATURE_BLOCK",
            "SIGNATURE",
            "SIGNER_NAME",
            "SIGNER_FIRST_NAME",
            "SIGNER_LAST_NAME",
            "SIGNER_INITIALS",
            "SIGNER_EMAIL",
            "SIGNER_TITLE",
            "SIGNER_COMPANY",
            "SIGNATURE_DATE",
            "AGREEMENT_NAME",
            "AGREEMENT_MESSAGE",
            "TRANSACTION_ID",
            "SIGNATURE_STAMP",
            "PAYMENT",
            "DIGITAL_SIGNATURE",
            "CALC"
          ]
        },
        "validation": {
          "description": "Rule for validating the field value.",
          "type": "string",
          "required": false,
          "enum": [
            "NONE",
            "STRING",
            "NUMBER",
            "DATE",
            "DATE_CUSTOM",
            "TIME",
            "ZIP",
            "PHONE",
            "SOCIAL_SEC",
            "EMAIL",
            "CURRENCY",
            "PERCENT",
            "FORMULA",
            "CUSTOM",
            "XFA_PICTURE"
          ]
        },
        "displayLabel": {
          "description": "Display label attached to the field",
          "type": "string",
          "required": false
        },
        "hyperlink": {
          "description": "Hyperlink-specific data (e.g. as url, link type)",
          "type": "FormFieldHyperlink",
          "items": {
            "$ref": "FormFieldHyperlink"
          },
          "required": false
        },
        "backgroundColor": {
          "description": "Background color of the form field in RGB or HEX format",
          "type": "string",
          "required": false
        },
        "visible": {
          "description": "If set to false, then the form field is hidden.  Otherwise, it is visible.",
          "type": "boolean",
          "required": false
        },
        "displayFormatType": {
          "description": "Format type of the text field.",
          "type": "string",
          "required": false,
          "enum": [
            "DEFAULT",
            "DATE",
            "NUMBER"
          ]
        },
        "maxValue": {
          "format": "double",
          "description": "Upper bound of the number that can be entered by the signer",
          "type": "number",
          "required": false
        },
        "validationErrMsg": {
          "description": "Error message to be shown to the signer if filled value doesn't match the validations of the form field",
          "type": "string",
          "required": false
        },
        "displayFormat": {
          "description": "Format of the value of the field to be displayed based on the displayFormatType property.",
          "type": "string",
          "required": false
        },
        "visibleOptions": {
          "description": "Text values which are visible in a drop down form field",
          "type": "array",
          "items": {
            "$ref": "string"
          },
          "required": false
        },
        "readOnly": {
          "description": "true if it is a read-only field, else false",
          "type": "boolean",
          "required": false
        },
        "fontName": {
          "description": "Font name of the form field",
          "type": "string",
          "required": false
        },
        "conditionalAction": {
          "description": "A predicate (or set of predicates) that determines whether this field is visible and enabled.",
          "type": "FormFieldConditionalAction",
          "items": {
            "$ref": "FormFieldConditionalAction"
          },
          "required": false
        },
        "name": {
          "description": "The name of the form field",
          "type": "string",
          "required": true
        },
        "fontSize": {
          "format": "double",
          "description": "Font size of the form field in points",
          "type": "number",
          "required": false
        },
        "locations": {
          "description": "All locations in a document where the form field is placed",
          "type": "array",
          "items": {
            "$ref": "FormFieldLocation"
          },
          "required": true
        },
        "assignee": {
          "description": "Who the field is assigned to. Valid values are a participant set id, null, \"NOBODY\", \"PREFILL\" or \"EVERYONE\". If set to a participant set id, then any member of that participant set may fill out the field. \"NOBODY\" indicates that the field may not be filled by anybody (e.g. autopopulated fields like transaction number). \"PREFILL\" indicates that the field will be filled by the sender before the agreement is sent out for signing. \"EVERYONE\" exists only in hyperlink fields currently and indicates that it is assigned to all participants. null indicates that anybody may fill out the field. If the propeerty isn't specified, it is treated as null.",
          "type": "string",
          "required": false
        },
        "alignment": {
          "description": "Alignment of the text.",
          "type": "string",
          "required": false,
          "enum": [
            "LEFT",
            "RIGHT",
            "CENTER"
          ]
        },
        "fontColor": {
          "description": "Font color of the form field in RGB or HEX format",
          "type": "string",
          "required": false
        },
        "maxLength": {
          "description": "Maximum length of the input text field in terms of no. of characters",
          "type": "integer",
          "required": false
        }
      }
    },
    "LibraryViewInfo": {
      "id": "LibraryViewInfo",
      "properties": {
        "commonViewConfiguration": {
          "description": "Common view configuration for all the available views",
          "type": "CommonViewConfiguration",
          "items": {
            "$ref": "CommonViewConfiguration"
          },
          "required": false
        },
        "name": {
          "description": "Name of the requested libraryDocument view",
          "showInSampleRequest": true,
          "type": "string",
          "required": true,
          "enum": [
            "EDIT",
            "DOCUMENT",
            "MANAGE",
            "SEND",
            "ALL"
          ]
        },
        "sendViewConfiguration": {
          "description": "Send page view configuration. This will be ignored for views other than SEND.",
          "type": "SendViewConfiguration",
          "items": {
            "$ref": "SendViewConfiguration"
          },
          "required": false
        }
      }
    },
    "LibraryDocumentMembersInfo": {
      "id": "LibraryDocumentMembersInfo",
      "properties": {
        "creatorInfo": {
          "description": "Information about the creator of the library document.",
          "type": "SenderInfo",
          "items": {
            "$ref": "SenderInfo"
          },
          "required": true
        }
      }
    },
    "SenderInfo": {
      "id": "SenderInfo",
      "properties": {
        "participantId": {
          "description": " The unique identifier of the creator of the library document.",
          "type": "string",
          "required": true
        },
        "createdDate": {
          "description": "The date when the sender was added. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
          "type": "date",
          "required": false
        },
        "hidden": {
          "description": "True if the library document is hidden for the user that is calling the API. Only returned if self is true.",
          "type": "boolean",
          "required": true
        },
        "name": {
          "description": "Name of the creator of the library document, if available.",
          "type": "string",
          "required": true
        },
        "self": {
          "description": "True if the creator of the library document is the same user that is calling the API.",
          "type": "boolean",
          "required": true
        },
        "company": {
          "description": "Company of the creator of the library document, if available.",
          "type": "string",
          "required": true
        },
        "userId": {
          "description": "The user ID of the sender. This will be returned as part of GET call but is ignored if passed as part of PUT call.",
          "type": "string",
          "required": false
        },
        "email": {
          "description": "Email of the creator of the library document.",
          "type": "string",
          "required": true
        }
      }
    },
    "LibraryDocumentViewResponse": {
      "id": "LibraryDocumentViewResponse",
      "properties": {
        "libraryViewList": {
          "description": "List of library docuemnt views",
          "type": "array",
          "items": {
            "$ref": "LibraryView"
          },
          "required": true
        }
      }
    },
    "FormFieldConditionalAction": {
      "description": "Conditional actions to perfom on this form field.",
      "id": "FormFieldConditionalAction",
      "properties": {
        "predicates": {
          "description": "The predicates to be evaluated in order to determine whether this condition is true",
          "type": "array",
          "items": {
            "$ref": "FormFieldConditionPredicate"
          },
          "required": false
        },
        "anyOrAll": {
          "description": "It indicates if any one of the conditions or all of them have to be true.",
          "type": "string",
          "required": false,
          "enum": [
            "ALL",
            "ANY"
          ]
        },
        "action": {
          "description": "Action to show/hide the form field is to be taken on the basis of evaluation of conditions.",
          "type": "string",
          "required": false,
          "enum": [
            "SHOW",
            "HIDE",
            "DISABLE",
            "ENABLE"
          ]
        }
      }
    },
    "FileUploadOptions": {
      "id": "FileUploadOptions",
      "properties": {
        "canEditFiles": {
          "description": "Whether the file upload section can be edited by adding or removing files. Default value is taken as true. Changing the default value will alter the compose page view configuration for this agreement, but is not an access control mechanism",
          "type": "boolean",
          "required": false
        },
        "localFile": {
          "description": "Whether local file upload button should appear or not. Default value is taken as true",
          "type": "boolean",
          "required": false
        },
        "webConnectors": {
          "description": "Whether link to attach documents from web sources like Dropbox should appear or not. Default value is taken as true",
          "type": "boolean",
          "required": false
        },
        "libraryDocument": {
          "description": "Whether library documents link should appear or not. Default value is taken as true",
          "type": "boolean",
          "required": false
        }
      }
    },
    "FormFieldPutInfo": {
      "description": "Information required to add or replace agreement form fields",
      "id": "FormFieldPutInfo",
      "properties": {
        "fields": {
          "description": "The list of fields to update or replace. PDF_SIGNATURE inputType field is currently not supported.",
          "type": "array",
          "items": {
            "$ref": "FormField"
          },
          "required": true
        }
      }
    },
    "DocumentUrl": {
      "id": "DocumentUrl",
      "properties": {
        "url": {
          "description": "Secure URL of the document",
          "type": "string",
          "required": true
        }
      }
    },
    "FormFieldLocation": {
      "description": "Location information for form fields",
      "id": "FormFieldLocation",
      "properties": {
        "pageNumber": {
          "description": "Number of the page where form field has to be placed, starting from 1.",
          "type": "integer",
          "required": true
        },
        "top": {
          "format": "double",
          "description": "No. of pixels from bottom of the page for form field placement",
          "type": "number",
          "required": true
        },
        "left": {
          "format": "double",
          "description": "No. of pixels from left of the page for form field placement",
          "type": "number",
          "required": true
        },
        "width": {
          "format": "double",
          "description": "Width of the form field in pixels",
          "type": "number",
          "required": true
        },
        "height": {
          "format": "double",
          "description": "Height of the form field in pixels",
          "type": "number",
          "required": true
        }
      }
    },
    "LibraryDocumentFormFields": {
      "description": "A JSON list of all of the fields for a form",
      "id": "LibraryDocumentFormFields",
      "properties": {
        "fields": {
          "description": "List of the form fields in an agreement",
          "type": "array",
          "items": {
            "$ref": "FormField"
          },
          "required": true
        }
      }
    },
    "AccountSharerInfo": {
      "id": "AccountSharerInfo",
      "properties": {
        "permissions": {
          "description": "A list of permissions given for this account sharing.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "VIEW",
              "SEND",
              "MODIFY"
            ]
          },
          "required": true
        },
        "fullName": {
          "description": "Full name of this account sharer.",
          "type": "string",
          "required": true
        },
        "userId": {
          "description": "A unique identifier of the user resource for REST APIs as issued by Sign.",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "The email address of the user",
          "type": "string",
          "required": true
        }
      }
    },
    "LibraryDocumentEventList": {
      "id": "EventList",
      "properties": {
        "events": {
          "description": "An array of event objects.",
          "type": "array",
          "items": {
            "$ref": "LibraryDocumentEvent"
          },
          "required": true
        }
      }
    },
    "DigitalSignatureInfo": {
      "id": "DigitalSignatureInfo",
      "properties": {
        "name": {
          "description": "Name captured during digital signing",
          "type": "string",
          "required": true
        },
        "company": {
          "description": "Company name captured during digital signing",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "Email captured during digital signing",
          "type": "string",
          "required": true
        }
      }
    },
    "PageInfo": {
      "id": "PageInfo",
      "properties": {
        "nextCursor": {
          "description": "Used to navigate to the next page. If not returned, there are no further pages.",
          "type": "string",
          "required": true
        }
      }
    },
    "LibraryView": {
      "id": "LibraryView",
      "properties": {
        "isCurrent": {
          "description": "True if this view is the current view",
          "type": "boolean",
          "required": true
        },
        "embeddedCode": {
          "description": "Embedded code of url of resource ",
          "type": "string",
          "required": false
        },
        "name": {
          "description": "Name of the requested libraryDocument view",
          "showInSampleRequest": true,
          "type": "string",
          "required": true,
          "enum": [
            "EDIT",
            "DOCUMENT",
            "MANAGE",
            "SEND",
            "ALL"
          ]
        },
        "expiration": {
          "format": "date",
          "description": "Expiration of user url ",
          "type": "string",
          "required": false
        },
        "url": {
          "description": "Url of resource location",
          "type": "string",
          "required": false
        }
      }
    },
    "VisibilityInfo": {
      "id": "VisibilityInfo",
      "properties": {
        "visibility": {
          "description": "Specifies the visibility. The possible values are HIDE or SHOW",
          "type": "string",
          "required": true,
          "enum": [
            "SHOW",
            "HIDE"
          ]
        }
      }
    },
    "LibraryDocumentStateInfo": {
      "id": "LibraryDocumentStateInfo",
      "properties": {
        "state": {
          "description": "State of the library document.",
          "type": "string",
          "required": true,
          "enum": [
            "AUTHORING",
            "ACTIVE",
            "REMOVED"
          ]
        }
      }
    },
    "CommonViewConfiguration": {
      "id": "CommonViewConfiguration",
      "properties": {
        "autoLoginUser": {
          "description": "Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false",
          "type": "boolean",
          "required": false
        },
        "noChrome": {
          "description": "No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false",
          "type": "boolean",
          "required": false
        },
        "locale": {
          "description": "Message template locale",
          "type": "string",
          "required": false
        }
      }
    },
    "PageImageUrl": {
      "id": "PageImageUrl",
      "properties": {
        "pageNumber": {
          "description": "Page number within the document.",
          "type": "integer",
          "required": true
        },
        "url": {
          "description": "An image url.",
          "type": "string",
          "required": true
        }
      }
    },
    "Documents": {
      "id": "Documents",
      "properties": {
        "documents": {
          "description": "A list of documents",
          "type": "array",
          "items": {
            "$ref": "Document"
          },
          "required": true
        }
      }
    },
    "DocumentImageUrlsInfo": {
      "id": "DocumentImageUrlsInfo",
      "properties": {
        "documentImageUrlsList": {
          "description": "A list of documents image URLs.",
          "type": "array",
          "items": {
            "$ref": "DocumentImageUrls"
          },
          "required": true
        },
        "documentId": {
          "description": "Id of the document",
          "type": "string",
          "required": true
        }
      }
    },
    "Note": {
      "id": "Note",
      "properties": {
        "note": {
          "description": "Content of Note field",
          "type": "string",
          "required": true
        }
      }
    },
    "DocumentImageUrls": {
      "id": "DocumentImageUrls",
      "properties": {
        "imageURLs": {
          "description": "A list of image url (one per page).",
          "type": "array",
          "items": {
            "$ref": "PageImageUrl"
          },
          "required": true
        },
        "imagesAvailable": {
          "description": "true if images for the associated image size is available, else false.",
          "type": "boolean",
          "required": false
        },
        "imageSize": {
          "description": "ImageSize corresponding to the imageUrl returned ",
          "type": "string",
          "required": false,
          "enum": [
            "FIXED_WIDTH_50px",
            "FIXED_WIDTH_250px",
            "FIXED_WIDTH_675px",
            "ZOOM_50_PERCENT",
            "ZOOM_75_PERCENT",
            "ZOOM_100_PERCENT",
            "ZOOM_125_PERCENT",
            "ZOOM_150_PERCENT",
            "ZOOM_200_PERCENT"
          ]
        }
      }
    },
    "URLFileInfo": {
      "id": "URLFileInfo",
      "properties": {
        "name": {
          "description": "The original system file name of the document being sent",
          "type": "string",
          "required": true
        },
        "mimeType": {
          "description": "The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed",
          "type": "string",
          "required": true
        },
        "url": {
          "description": "A publicly accessible URL for retrieving the raw file content",
          "type": "string",
          "required": true
        }
      }
    },
    "MyAgreementInfo": {
      "id": "MyAgreementInfo",
      "properties": {
        "accountSharers": {
          "description": "A list of account sharer in relation to the api caller and this resource.",
          "type": "array",
          "items": {
            "$ref": "AccountSharerInfo"
          },
          "required": true
        }
      }
    }
  },
  "apiVersion": "6.0.0",
  "swaggerVersion": "1.2",
  "basePath": "https://secure.au1.echosign.com/api/rest/v6",
  "apis": [
    {
      "path": "/libraryDocuments",
      "operations": [
        {
          "summary": "Creates a template that is placed in the library of the user for reuse.",
          "notes": null,
          "nickname": "createLibraryDocument",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ARGUMENTS: One or more arguments to the method are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_EMAIL: Email provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_FILE_INFO: Invalid or no file info is provided.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NOT_AUTHORIZED_FOR_TRANSIENT_RESOURCE: Not authorized for the transient resource referred in the request.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "UNAUTHORIZED: You cannot work on behalf of this user.",
              "code": "401"
            },
            {
              "reason": "UNVERIFIED_USER: The user has registered but has not verified their email address. The user must use the Adobe Sign web site to complete verification.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "SEND_LIMIT_EXCEEDED: Agreement creation quota of the user is exhausted.",
              "code": "403"
            },
            {
              "reason": "INVALID_TRANSIENTDOCUMENT_ID: The Transient Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "TRANSIENT_RESOURCE_DELETED: Transient Resource deleted from the server.",
              "code": "404"
            },
            {
              "reason": "INVALID_GROUP_ID_FOR_USER: Specified group is invalid or user is not a member.",
              "code": "405"
            },
            {
              "reason": "UNSUPPORTED_MEDIA_TYPE: Content type was not provided or is not supported.",
              "code": "415"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "POST",
          "type": "LibraryDocumentCreationResponse",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_write')\" oncontextmenu=\"this.href=oauthDoc('library_write')\" target=\"oauthDoc\">library_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "body",
              "name": "LibraryDocumentInfo",
              "description": "Information about the library document that you want to create.",
              "type": "LibraryDocumentCreationInfoV6",
              "required": true
            }
          ],
          "order": 118
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/views",
      "operations": [
        {
          "summary": "Retrieves the latest state view url of a library document.",
          "notes": null,
          "nickname": "createLibraryDocumentView",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read",
                "description": "library document read is always required"
              },
              {
                "scope": "user_login",
                "description": "Required additionally if the autoLoginUser parameter is set to true"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "VIEW_NOT_AVAILABLE: Requested view is not available for the resource in the current state.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "POST",
          "type": "LibraryDocumentViewResponse",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a> - library document read is always required</li><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('user_login')\" oncontextmenu=\"this.href=oauthDoc('user_login')\" target=\"oauthDoc\">user_login</a> - Required additionally if the autoLoginUser parameter is set to true</li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "LibraryViewInfo",
              "description": "Name of the required view and its desired configuration.",
              "type": "LibraryViewInfo",
              "required": true
            }
          ],
          "order": 119
        }
      ]
    },
    {
      "path": "/libraryDocuments",
      "operations": [
        {
          "summary": "Retrieves library documents for a user.",
          "notes": null,
          "nickname": "getLibraryDocuments",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_CURSOR: Page cursor provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_PAGE_SIZE: Page size is either invalid or not within permissible range.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_GROUP_ID: The Group ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_GROUP_ID_FOR_USER: Specified group is invalid or user is not a member.",
              "code": "405"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "LibraryDocuments",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "groupId",
              "description": "The group identifier, as returned by the group creation API or retrieved from the API to fetch groups.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "showHiddenLibraryDocuments",
              "description": "A query parameter to fetch all the hidden library documents along with the visible library documents. Default value is false.",
              "type": "boolean",
              "required": false
            },
            {
              "paramType": "query",
              "name": "cursor",
              "description": "Used to navigate through the pages. If not provided, returns the first page.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "pageSize",
              "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
              "type": "integer",
              "required": false
            }
          ],
          "order": 120
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}",
      "operations": [
        {
          "summary": "Retrieves the details of a library document.",
          "notes": null,
          "nickname": "getLibraryDocumentInfo",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "LibraryDocumentCreationInfoV6",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            }
          ],
          "order": 121
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/auditTrail",
      "operations": [
        {
          "summary": "Retrieves the audit trail associated with a library document.",
          "notes": null,
          "format": "byte",
          "nickname": "getLibraryDocumentAuditTrail",
          "produces": [
            "application/pdf",
            "application/pdf;encoding=base64"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            }
          ],
          "order": 124
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/combinedDocument",
      "operations": [
        {
          "summary": "Retrieves the combined document associated with a library document.",
          "notes": null,
          "format": "byte",
          "nickname": "getCombinedDocument",
          "produces": [
            "application/pdf",
            "application/pdf;encoding=base64"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_REMOVED: The library document has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "attachAuditReport",
              "description": "When set to YES attach an audit report to the library document PDF. Default value will be false.",
              "type": "boolean",
              "required": false
            }
          ],
          "order": 126
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/combinedDocument/url",
      "operations": [
        {
          "summary": "Retrieves url of all visible pages of all the documents associated with a library document.",
          "notes": null,
          "nickname": "getLibraryCombinedDocumentUrl",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "DOCUMENTS_REMOVED: The documents have already been removed.",
              "code": "404"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_REMOVED: The library document has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "DocumentUrl",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "attachAuditReport",
              "description": "When set to true, attach an audit report to the library document PDF. The default value is false.",
              "type": "boolean",
              "required": false
            }
          ],
          "order": 127
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/documents",
      "operations": [
        {
          "summary": "Retrieves the IDs of the documents associated with library document.",
          "notes": null,
          "nickname": "getDocuments",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_REMOVED: The library document has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "Documents",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "versionId",
              "description": "The version identifier of library_document as provided by the API which retrieves information of a specific library document. If not provided then latest version will be used.",
              "type": "string",
              "required": false
            }
          ],
          "order": 128
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/documents/{documentId}",
      "operations": [
        {
          "summary": "Retrieves the file stream of a document of library document.",
          "notes": null,
          "format": "byte",
          "nickname": "getLibraryDocument",
          "produces": [
            "application/pdf",
            "application/pdf;encoding=base64"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_DOCUMENT_ID: The Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_REMOVED: The library document has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "documentId",
              "description": "The document identifier, as retrieved from the API which fetches the documents of a specified library document",
              "type": "string",
              "required": true
            }
          ],
          "order": 129
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/documents/{documentId}/imageUrls",
      "operations": [
        {
          "summary": "Retrieves image urls of all visible pages of a document associated with a library document.",
          "notes": null,
          "nickname": "getLibraryDocumentImageUrls",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ARGUMENTS: One or more arguments to the method are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_IMAGE_SIZE: Must provide a comma separated list of valid image sizes.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_DOCUMENT_ID: The Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_REMOVED: The library document has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "DocumentImageUrlsInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "documentId",
              "description": "The document identifier, as retrieved from the API which fetches the documents of a specified library document",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "imageSizes",
              "description": "A comma separated list of image sizes i.e. {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_50_PERCENT, ZOOM_75_PERCENT, ZOOM_100_PERCENT, ZOOM_125_PERCENT, ZOOM_150_PERCENT, ZOOM_200_PERCENT}. Default sizes returned are {FIXED_WIDTH_50px, FIXED_WIDTH_250px, FIXED_WIDTH_675px, ZOOM_100_PERCENT}. ",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "startPage",
              "description": "Start of page number range for which imageUrls are requested. Starting page number should be greater than 0.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "query",
              "name": "endPage",
              "description": "End of page number range for which imageUrls are requested.",
              "type": "integer",
              "required": false
            }
          ],
          "order": 131
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/formData",
      "operations": [
        {
          "summary": "Retrieves data entered into the interactive form fields of the library document.",
          "notes": "This API can only be called by the creator of the library document",
          "format": "byte",
          "nickname": "getFormData",
          "produces": [
            "application/json",
            "text/csv"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_CURSOR: Page cursor provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_PAGE_SIZE: Page size is either invalid or not within permissible range.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "NO_FORM_DATA: There is no form data available.",
              "code": "404"
            },
            {
              "reason": "NOT_ACCEPTABLE: The server cannot send the response in a format requested in the Accept header.",
              "code": "406"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "cursor",
              "description": "Used to navigate through the pages. If not provided, returns the first page.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "pageSize",
              "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
              "type": "integer",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            }
          ],
          "order": 132
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/formFields",
      "operations": [
        {
          "summary": "Retrieves details of form fields of a library document.",
          "notes": null,
          "nickname": "getFormFields",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_REMOVED: The library document has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "LibraryDocumentFormFields",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            }
          ],
          "order": 133
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/members",
      "operations": [
        {
          "summary": "Retrieves information of members (creator) of the library document.",
          "notes": null,
          "nickname": "getAllLibraryDocumentMembers",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "LibraryDocumentMembersInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            }
          ],
          "order": 134
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/me",
      "operations": [
        {
          "summary": "Retrieves the library document information related to the api caller",
          "notes": null,
          "nickname": "getLibraryDocumentInfoForUser",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "MyAgreementInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            }
          ],
          "order": 135
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/events",
      "operations": [
        {
          "summary": "Retrieves the events information for a library document.",
          "notes": null,
          "nickname": "getEvents",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "LibraryDocumentEventList",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            }
          ],
          "order": 228
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/me/note",
      "operations": [
        {
          "summary": "Retrieves the latest note of a library document for the API user.",
          "notes": null,
          "nickname": "getLibraryDocumentNoteForApiUser",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "Note",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_read')\" oncontextmenu=\"this.href=oauthDoc('library_read')\" target=\"oauthDoc\">library_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            }
          ],
          "order": 229
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/formFields",
      "operations": [
        {
          "summary": "Updates details of form fields of a library document.",
          "notes": null,
          "nickname": "updateFormFields",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_REMOVED: The library document has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "LibraryDocumentFormFields",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_write')\" oncontextmenu=\"this.href=oauthDoc('library_write')\" target=\"oauthDoc\">library_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "FormFieldPutInfo",
              "description": "List of form fields to set for library document",
              "type": "FormFieldPutInfo",
              "required": true
            }
          ],
          "order": 230
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/me/note",
      "operations": [
        {
          "summary": "Updates the latest note of a library document for the API user.",
          "notes": null,
          "nickname": "updateLibraryDocumentNoteForApiUser",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_write')\" oncontextmenu=\"this.href=oauthDoc('library_write')\" target=\"oauthDoc\">library_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "Note",
              "description": "The note to be associated with the library document.",
              "type": "Note",
              "required": true
            }
          ],
          "order": 231
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}",
      "operations": [
        {
          "summary": "Updates the library document.",
          "notes": "Currently status, name, sharingMode and templateTypes of the library document can only be updated.",
          "nickname": "updateLibraryDocument",
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_REMOVED: The library document has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_NOT_MODIFIED: The library document has not been modified.",
              "code": "412"
            },
            {
              "reason": "RESOURCE_MODIFIED: Resource is already modified with newer version.",
              "code": "412"
            },
            {
              "reason": "UNSUPPORTED_MEDIA_TYPE: Content type was not provided or is not supported.",
              "code": "415"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_write')\" oncontextmenu=\"this.href=oauthDoc('library_write')\" target=\"oauthDoc\">library_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "LibraryDocumentInfo",
              "description": "Information about the library document that you want to create.",
              "type": "LibraryDocumentInfo",
              "required": true
            }
          ],
          "order": 234
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/me/visibility",
      "operations": [
        {
          "summary": "Updates the visibility of library document.",
          "notes": null,
          "nickname": "updateLibraryDocumentVisibility",
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_REMOVED: The library document has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_write')\" oncontextmenu=\"this.href=oauthDoc('library_write')\" target=\"oauthDoc\">library_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "VisibilityInfo",
              "description": "Information to update visibility of agreement",
              "type": "VisibilityInfo",
              "required": true
            }
          ],
          "order": 235
        }
      ]
    },
    {
      "path": "/libraryDocuments/{libraryDocumentId}/state",
      "operations": [
        {
          "summary": "Updates the library document's state.",
          "notes": "Currently state can be changed from AUTHORING to ACTIVE, AUTHORING to REMOVED or ACTIVE to REMOVED",
          "nickname": "updateLibraryDocumentState",
          "authorizations": {
            "oauth2": [
              {
                "scope": "library_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "OPERATION_NOT_ALLOWED: Requested Operation is not allowed.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_REMOVED: The library document has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "RESOURCE_MODIFIED: Resource is already modified with newer version.",
              "code": "412"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('library_write')\" oncontextmenu=\"this.href=oauthDoc('library_write')\" target=\"oauthDoc\">library_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "libraryDocumentId",
              "description": "The document identifier, as retrieved from the API to fetch library documents.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "LibraryDocumentStateInfo",
              "description": "Information about the state of library document to which you want to update",
              "type": "LibraryDocumentStateInfo",
              "required": true
            }
          ],
          "order": 236
        }
      ]
    }
  ],
  "resourcePath": "/libraryDocuments",
  "produces": [
    "application/json",
    "text/csv"
  ]
}
